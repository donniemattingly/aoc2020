{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1","program":"/Users/donnie/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","rustler","--edition=2018","/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"derive\"","--cfg","feature=\"rustler_codegen\"","-C","metadata=d61635f3553af0cf","-C","extra-filename=-d61635f3553af0cf","--out-dir","/Users/donnie/code/aoc2020/native/fastutils/target/rls/debug/deps","-L","dependency=/Users/donnie/code/aoc2020/native/fastutils/target/rls/debug/deps","--extern","lazy_static=/Users/donnie/code/aoc2020/native/fastutils/target/rls/debug/deps/liblazy_static-3013e27ea0e8d63b.rmeta","--extern","rustler_codegen=/Users/donnie/code/aoc2020/native/fastutils/target/rls/debug/deps/librustler_codegen-730ddef4ff929036.dylib","--extern","rustler_sys=/Users/donnie/code/aoc2020/native/fastutils/target/rls/debug/deps/librustler_sys-abd9fa64965f8597.rmeta","--cap-lints","allow","--cfg","nif_version_2_7","--cfg","nif_version_2_8","--cfg","nif_version_2_9","--cfg","nif_version_2_10","--cfg","nif_version_2_11","--cfg","nif_version_2_12","--cfg","nif_version_2_13","--cfg","nif_version_2_14","--cfg","nif_version_2_15","--error-format=json","--sysroot","/Users/donnie/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/donnie/code/aoc2020/native/fastutils/target/rls/debug/deps/librustler-d61635f3553af0cf.rmeta"},"prelude":{"crate_id":{"name":"rustler","disambiguator":[16189970952739167143,14318715054425289507]},"crate_root":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src","external_crates":[{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[17709530074661319104,12336107577347767734]}},{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[7138156953393190069,11167026927698897809]}},{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[11939350525270529775,5037047709352975340]}},{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[7424844044863599670,8838585625468081887]}},{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4100565041195182675,5566087110101365955]}},{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[12006298212829472042,4483643569962591785]}},{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[16083605182766867675,18153965418074129170]}},{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[13622714777497736699,12208407265214949534]}},{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[7290380455030431949,16719885876051447607]}},{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[447808001145654106,10581376888684971677]}},{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[13533970680996139336,18250961867226035502]}},{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[212669238320550075,14725093603103672492]}},{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[17611450619260455171,13049759995292817799]}},{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[2915321326152136006,11103866167427651478]}},{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[16327418871979137000,16753155218778980611]}},{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","num":16,"id":{"name":"rustler_sys","disambiguator":[12228755576275060090,12413680046164801627]}},{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","num":17,"id":{"name":"lazy_static","disambiguator":[7064805322198458713,2909941048741555990]}},{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","num":18,"id":{"name":"rustler_codegen","disambiguator":[13596146139995676542,17352930674486977140]}}],"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":0,"byte_end":2051,"line_start":1,"line_end":68,"column_start":1,"column_end":97}},"imports":[{"kind":"Use","ref_id":{"krate":16,"index":132},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/wrapper.rs","byte_start":3814,"byte_end":3833,"line_start":52,"line_end":52,"column_start":22,"column_end":41},"alias_span":null,"name":"NIF_RESOURCE_FLAGS","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":40},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/codegen_runtime.rs","byte_start":18389,"byte_end":18404,"line_start":8,"line_end":8,"column_start":36,"column_end":51},"alias_span":null,"name":"raise_exception","value":"","parent":{"krate":0,"index":163}},{"kind":"Use","ref_id":{"krate":1,"index":3901},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/codegen_runtime.rs","byte_start":18436,"byte_end":18441,"line_start":10,"line_end":10,"column_start":5,"column_end":10},"alias_span":null,"name":"c_int","value":"","parent":{"krate":0,"index":163}},{"kind":"Use","ref_id":{"krate":2,"index":3324},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/codegen_runtime.rs","byte_start":18443,"byte_end":18449,"line_start":10,"line_end":10,"column_start":12,"column_end":18},"alias_span":null,"name":"c_void","value":"","parent":{"krate":0,"index":163}},{"kind":"Use","ref_id":{"krate":0,"index":138},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/codegen_runtime.rs","byte_start":18451,"byte_end":18482,"line_start":10,"line_end":10,"column_start":20,"column_end":51},"alias_span":null,"name":"get_nif_resource_type_init_size","value":"","parent":{"krate":0,"index":163}},{"kind":"Use","ref_id":{"krate":0,"index":147},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/codegen_runtime.rs","byte_start":18484,"byte_end":18497,"line_start":10,"line_end":10,"column_start":53,"column_end":66},"alias_span":null,"name":"DEF_NIF_ENTRY","value":"","parent":{"krate":0,"index":163}},{"kind":"Use","ref_id":{"krate":0,"index":146},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/codegen_runtime.rs","byte_start":18499,"byte_end":18511,"line_start":10,"line_end":10,"column_start":68,"column_end":80},"alias_span":null,"name":"DEF_NIF_FUNC","value":"","parent":{"krate":0,"index":163}},{"kind":"Use","ref_id":{"krate":0,"index":140},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/codegen_runtime.rs","byte_start":18517,"byte_end":18544,"line_start":11,"line_end":11,"column_start":5,"column_end":32},"alias_span":null,"name":"MUTABLE_NIF_RESOURCE_HANDLE","value":"","parent":{"krate":0,"index":163}},{"kind":"Use","ref_id":{"krate":0,"index":135},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/codegen_runtime.rs","byte_start":18546,"byte_end":18553,"line_start":11,"line_end":11,"column_start":34,"column_end":41},"alias_span":null,"name":"NIF_ENV","value":"","parent":{"krate":0,"index":163}},{"kind":"Use","ref_id":{"krate":16,"index":245},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/codegen_runtime.rs","byte_start":18555,"byte_end":18572,"line_start":11,"line_end":11,"column_start":43,"column_end":60},"alias_span":null,"name":"NIF_MAJOR_VERSION","value":"","parent":{"krate":0,"index":163}},{"kind":"Use","ref_id":{"krate":16,"index":246},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/codegen_runtime.rs","byte_start":18574,"byte_end":18591,"line_start":11,"line_end":11,"column_start":62,"column_end":79},"alias_span":null,"name":"NIF_MINOR_VERSION","value":"","parent":{"krate":0,"index":163}},{"kind":"Use","ref_id":{"krate":0,"index":136},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/codegen_runtime.rs","byte_start":18593,"byte_end":18601,"line_start":11,"line_end":11,"column_start":81,"column_end":89},"alias_span":null,"name":"NIF_TERM","value":"","parent":{"krate":0,"index":163}},{"kind":"Use","ref_id":{"krate":0,"index":923},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/mod.rs","byte_start":20946,"byte_end":20950,"line_start":5,"line_end":5,"column_start":29,"column_end":33},"alias_span":null,"name":"Atom","value":"","parent":{"krate":0,"index":207}},{"kind":"Use","ref_id":{"krate":0,"index":301},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/mod.rs","byte_start":21015,"byte_end":21021,"line_start":9,"line_end":9,"column_start":32,"column_end":38},"alias_span":null,"name":"Binary","value":"","parent":{"krate":0,"index":207}},{"kind":"Use","ref_id":{"krate":0,"index":275},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/mod.rs","byte_start":21023,"byte_end":21034,"line_start":9,"line_end":9,"column_start":40,"column_end":51},"alias_span":null,"name":"OwnedBinary","value":"","parent":{"krate":0,"index":207}},{"kind":"Use","ref_id":{"krate":0,"index":346},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/mod.rs","byte_start":21095,"byte_end":21107,"line_start":13,"line_end":13,"column_start":29,"column_end":41},"alias_span":null,"name":"ListIterator","value":"","parent":{"krate":0,"index":207}},{"kind":"Use","ref_id":{"krate":0,"index":416},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/mod.rs","byte_start":21165,"byte_end":21176,"line_start":17,"line_end":17,"column_start":28,"column_end":39},"alias_span":null,"name":"MapIterator","value":"","parent":{"krate":0,"index":207}},{"kind":"Use","ref_id":{"krate":0,"index":1142},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/mod.rs","byte_start":21315,"byte_end":21318,"line_start":27,"line_end":27,"column_start":28,"column_end":31},"alias_span":null,"name":"Pid","value":"","parent":{"krate":0,"index":207}},{"kind":"Use","ref_id":{"krate":0,"index":1146},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":1349,"byte_end":1353,"line_start":40,"line_end":40,"column_start":22,"column_end":26},"alias_span":null,"name":"Term","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":923},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":1383,"byte_end":1387,"line_start":42,"line_end":42,"column_start":5,"column_end":9},"alias_span":null,"name":"Atom","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":301},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":1389,"byte_end":1395,"line_start":42,"line_end":42,"column_start":11,"column_end":17},"alias_span":null,"name":"Binary","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":561},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":1397,"byte_end":1404,"line_start":42,"line_end":42,"column_start":19,"column_end":26},"alias_span":null,"name":"Decoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":558},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":1406,"byte_end":1413,"line_start":42,"line_end":42,"column_start":28,"column_end":35},"alias_span":null,"name":"Encoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":346},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":1415,"byte_end":1427,"line_start":42,"line_end":42,"column_start":37,"column_end":49},"alias_span":null,"name":"ListIterator","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":416},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":1429,"byte_end":1440,"line_start":42,"line_end":42,"column_start":51,"column_end":62},"alias_span":null,"name":"MapIterator","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":275},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":1442,"byte_end":1453,"line_start":42,"line_end":42,"column_start":64,"column_end":75},"alias_span":null,"name":"OwnedBinary","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1142},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":1455,"byte_end":1458,"line_start":42,"line_end":42,"column_start":77,"column_end":80},"alias_span":null,"name":"Pid","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":132},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":66640,"byte_end":66658,"line_start":19,"line_end":19,"column_start":25,"column_end":43},"alias_span":null,"name":"NIF_RESOURCE_FLAGS","value":"","parent":{"krate":0,"index":647}},{"kind":"Use","ref_id":{"krate":0,"index":690},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":1506,"byte_end":1517,"line_start":45,"line_end":45,"column_start":26,"column_end":37},"alias_span":null,"name":"ResourceArc","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":721},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":1576,"byte_end":1584,"line_start":49,"line_end":49,"column_start":25,"column_end":33},"alias_span":null,"name":"TermType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":757},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":1630,"byte_end":1644,"line_start":52,"line_end":52,"column_start":26,"column_end":40},"alias_span":null,"name":"SchedulerFlags","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1167},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":1680,"byte_end":1683,"line_start":54,"line_end":54,"column_start":22,"column_end":25},"alias_span":null,"name":"Env","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":800},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":1685,"byte_end":1693,"line_start":54,"line_end":54,"column_start":27,"column_end":35},"alias_span":null,"name":"OwnedEnv","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":845},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":1736,"byte_end":1741,"line_start":56,"line_end":56,"column_start":25,"column_end":30},"alias_span":null,"name":"spawn","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":837},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":1743,"byte_end":1753,"line_start":56,"line_end":56,"column_start":32,"column_end":42},"alias_span":null,"name":"JobSpawner","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":840},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":1755,"byte_end":1768,"line_start":56,"line_end":56,"column_start":44,"column_end":57},"alias_span":null,"name":"ThreadSpawner","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":841},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":1755,"byte_end":1768,"line_start":56,"line_end":56,"column_start":44,"column_end":57},"alias_span":null,"name":"ThreadSpawner","value":"","parent":{"krate":0,"index":856}},{"kind":"Use","ref_id":{"krate":0,"index":865},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":1825,"byte_end":1830,"line_start":60,"line_end":60,"column_start":23,"column_end":28},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":890},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":1876,"byte_end":1882,"line_start":63,"line_end":63,"column_start":26,"column_end":32},"alias_span":null,"name":"Return","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":18,"index":134},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":1981,"byte_end":1987,"line_start":68,"line_end":68,"column_start":27,"column_end":33},"alias_span":null,"name":"NifMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":18,"index":136},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":1989,"byte_end":1998,"line_start":68,"line_end":68,"column_start":35,"column_end":44},"alias_span":null,"name":"NifRecord","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":18,"index":133},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":2000,"byte_end":2009,"line_start":68,"line_end":68,"column_start":46,"column_end":55},"alias_span":null,"name":"NifStruct","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":18,"index":135},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":2011,"byte_end":2019,"line_start":68,"line_end":68,"column_start":57,"column_end":65},"alias_span":null,"name":"NifTuple","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":18,"index":137},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":2021,"byte_end":2032,"line_start":68,"line_end":68,"column_start":67,"column_end":78},"alias_span":null,"name":"NifUnitEnum","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":18,"index":138},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":2034,"byte_end":2049,"line_start":68,"line_end":68,"column_start":80,"column_end":95},"alias_span":null,"name":"NifUntaggedEnum","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":0,"byte_end":2051,"line_start":1,"line_end":68,"column_start":1,"column_end":97},"name":"","qualname":"::","value":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":163},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":594},{"krate":0,"index":637},{"krate":0,"index":638},{"krate":0,"index":639},{"krate":0,"index":640},{"krate":0,"index":641},{"krate":0,"index":642},{"krate":0,"index":643},{"krate":0,"index":644},{"krate":0,"index":645},{"krate":0,"index":646},{"krate":0,"index":647},{"krate":0,"index":717},{"krate":0,"index":718},{"krate":0,"index":753},{"krate":0,"index":754},{"krate":0,"index":768},{"krate":0,"index":769},{"krate":0,"index":825},{"krate":0,"index":826},{"krate":0,"index":827},{"krate":0,"index":828},{"krate":0,"index":853},{"krate":0,"index":854},{"krate":0,"index":855},{"krate":0,"index":856},{"krate":0,"index":1673},{"krate":0,"index":857},{"krate":0,"index":879},{"krate":0,"index":881},{"krate":0,"index":882},{"krate":0,"index":901},{"krate":0,"index":902},{"krate":0,"index":904},{"krate":0,"index":905},{"krate":0,"index":906},{"krate":0,"index":907},{"krate":0,"index":908},{"krate":0,"index":909},{"krate":0,"index":910}],"decl_id":null,"docs":" [Github](https://github.com/rusterlium/rustler)\n [Example](https://github.com/hansihe/Rustler_Example)","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":0,"byte_end":31,"line_start":1,"line_end":1,"column_start":1,"column_end":32}},{"value":"/ [Github](https://github.com/rusterlium/rustler)","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":33,"byte_end":84,"line_start":3,"line_end":3,"column_start":1,"column_end":52}},{"value":"/ [Example](https://github.com/hansihe/Rustler_Example)","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":85,"byte_end":142,"line_start":4,"line_end":4,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":143,"byte_end":146,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ Rustler is a library for writing Erlang NIFs in safe Rust code. That means there should be no","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":147,"byte_end":244,"line_start":6,"line_end":6,"column_start":1,"column_end":98}},{"value":"/ ways to crash the BEAM (Erlang VM). The library provides facilities for generating the","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":245,"byte_end":335,"line_start":7,"line_end":7,"column_start":1,"column_end":91}},{"value":"/ boilerplate for interacting with the BEAM, handles encoding and decoding of Erlang terms, and","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":336,"byte_end":433,"line_start":8,"line_end":8,"column_start":1,"column_end":98}},{"value":"/ catches rust panics before they unwind into C.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":434,"byte_end":484,"line_start":9,"line_end":9,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":485,"byte_end":488,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ The library provides functionality for both Erlang and Elixir, however Elixir is favored as of","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":489,"byte_end":587,"line_start":11,"line_end":11,"column_start":1,"column_end":99}},{"value":"/ now.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":588,"byte_end":596,"line_start":12,"line_end":12,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":597,"byte_end":600,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ This crate provides the entire runtime library for rustler. Code generators are located in the","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":601,"byte_end":699,"line_start":14,"line_end":14,"column_start":1,"column_end":99}},{"value":"/ rustler_codegen library.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":700,"byte_end":728,"line_start":15,"line_end":15,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":729,"byte_end":732,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ # Getting Started","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":733,"byte_end":754,"line_start":17,"line_end":17,"column_start":1,"column_end":22}},{"value":"/ There is a [`:rustler`](https://hex.pm/packages/rustler) package on hex.pm that provides","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":755,"byte_end":847,"line_start":18,"line_end":18,"column_start":1,"column_end":93}},{"value":"/ functionality which makes working with Rustler easier, including project generators, an","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":848,"byte_end":939,"line_start":19,"line_end":19,"column_start":1,"column_end":92}},{"value":"/ automatic NIF compiler for Mix, and utilities for loading the compiled NIF.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":940,"byte_end":1019,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":1020,"byte_end":1023,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ For more information about this, see [the documentation for","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":1024,"byte_end":1087,"line_start":22,"line_end":22,"column_start":1,"column_end":64}},{"value":"/ rustler_mix](https://hexdocs.pm/rustler/basics.html).","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":1088,"byte_end":1145,"line_start":23,"line_end":23,"column_start":1,"column_end":58}}]},{"kind":"Function","id":{"krate":0,"index":40},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/wrapper/exception.rs","byte_start":8996,"byte_end":9011,"line_start":12,"line_end":12,"column_start":15,"column_end":30},"name":"raise_exception","qualname":"::wrapper::exception::raise_exception","value":"pub unsafe fn raise_exception(NIF_ENV, NIF_TERM) -> NIF_TERM","parent":null,"children":[],"decl_id":null,"docs":" Raise an \"error exception\".","sig":null,"attributes":[{"value":"/ Raise an \"error exception\".","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/wrapper/exception.rs","byte_start":8638,"byte_end":8669,"line_start":3,"line_end":3,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/wrapper/exception.rs","byte_start":8670,"byte_end":8673,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ # Unsafe","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/wrapper/exception.rs","byte_start":8674,"byte_end":8686,"line_start":5,"line_end":5,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/wrapper/exception.rs","byte_start":8687,"byte_end":8690,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ The value returned by this function \"can be used only as the return value","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/wrapper/exception.rs","byte_start":8691,"byte_end":8768,"line_start":7,"line_end":7,"column_start":1,"column_end":78}},{"value":"/ from the NIF that invoked it (directly or indirectly) or be passed to","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/wrapper/exception.rs","byte_start":8769,"byte_end":8842,"line_start":8,"line_end":8,"column_start":1,"column_end":74}},{"value":"/ `enif_is_exception`, but not to any other NIF API function.\"","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/wrapper/exception.rs","byte_start":8843,"byte_end":8907,"line_start":9,"line_end":9,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/wrapper/exception.rs","byte_start":8908,"byte_end":8911,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ And of course the usual rules about `env` and `term` still apply.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/wrapper/exception.rs","byte_start":8912,"byte_end":8981,"line_start":11,"line_end":11,"column_start":1,"column_end":70}}]},{"kind":"Type","id":{"krate":0,"index":135},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/wrapper.rs","byte_start":3130,"byte_end":3137,"line_start":31,"line_end":31,"column_start":10,"column_end":17},"name":"NIF_ENV","qualname":"::wrapper::NIF_ENV","value":"*mut rustler_sys::ErlNifEnv","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":136},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/wrapper.rs","byte_start":3178,"byte_end":3186,"line_start":32,"line_end":32,"column_start":10,"column_end":18},"name":"NIF_TERM","qualname":"::wrapper::NIF_TERM","value":"size_t","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":138},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/wrapper.rs","byte_start":3274,"byte_end":3305,"line_start":35,"line_end":35,"column_start":8,"column_end":39},"name":"get_nif_resource_type_init_size","qualname":"::wrapper::get_nif_resource_type_init_size","value":"pub fn get_nif_resource_type_init_size() -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":140},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/wrapper.rs","byte_start":3440,"byte_end":3467,"line_start":40,"line_end":40,"column_start":10,"column_end":37},"name":"MUTABLE_NIF_RESOURCE_HANDLE","qualname":"::wrapper::MUTABLE_NIF_RESOURCE_HANDLE","value":"*mut c_void","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":146},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/wrapper.rs","byte_start":3702,"byte_end":3714,"line_start":50,"line_end":50,"column_start":10,"column_end":22},"name":"DEF_NIF_FUNC","qualname":"::wrapper::DEF_NIF_FUNC","value":"rustler_sys::ErlNifFunc","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":147},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/wrapper.rs","byte_start":3751,"byte_end":3764,"line_start":51,"line_end":51,"column_start":10,"column_end":23},"name":"DEF_NIF_ENTRY","qualname":"::wrapper::DEF_NIF_ENTRY","value":"rustler_sys::ErlNifEntry","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":163},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/codegen_runtime.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"codegen_runtime","qualname":"::codegen_runtime","value":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/codegen_runtime.rs","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":182},{"krate":0,"index":185},{"krate":0,"index":188},{"krate":0,"index":202},{"krate":0,"index":204}],"decl_id":null,"docs":" Functions used by runtime generated code. Should not be used.\n","sig":null,"attributes":[{"value":"/ Functions used by runtime generated code. Should not be used.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/codegen_runtime.rs","byte_start":18163,"byte_end":18228,"line_start":1,"line_end":1,"column_start":1,"column_end":66}}]},{"kind":"Trait","id":{"krate":0,"index":180},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/codegen_runtime.rs","byte_start":18708,"byte_end":18721,"line_start":17,"line_end":17,"column_start":18,"column_end":31},"name":"NifReturnable","qualname":"::codegen_runtime::NifReturnable","value":"NifReturnable","parent":null,"children":[{"krate":0,"index":181}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/codegen_runtime.rs","byte_start":18738,"byte_end":18749,"line_start":18,"line_end":18,"column_start":15,"column_end":26},"name":"as_returned","qualname":"::codegen_runtime::NifReturnable::as_returned","value":"pub unsafe fn as_returned(Self, Env) -> NifReturned","parent":{"krate":0,"index":180},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":189},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/codegen_runtime.rs","byte_start":19317,"byte_end":19321,"line_start":41,"line_end":41,"column_start":5,"column_end":9},"name":"Term","qualname":"::codegen_runtime::NifReturned::Term","value":"NifReturned::Term(NIF_TERM)","parent":{"krate":0,"index":188},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":192},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/codegen_runtime.rs","byte_start":19337,"byte_end":19342,"line_start":42,"line_end":42,"column_start":5,"column_end":10},"name":"Raise","qualname":"::codegen_runtime::NifReturned::Raise","value":"NifReturned::Raise(NIF_TERM)","parent":{"krate":0,"index":188},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":195},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/codegen_runtime.rs","byte_start":19358,"byte_end":19364,"line_start":43,"line_end":43,"column_start":5,"column_end":11},"name":"BadArg","qualname":"::codegen_runtime::NifReturned::BadArg","value":"NifReturned::BadArg","parent":{"krate":0,"index":188},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":197},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/codegen_runtime.rs","byte_start":19370,"byte_end":19380,"line_start":44,"line_end":44,"column_start":5,"column_end":15},"name":"Reschedule","qualname":"::codegen_runtime::NifReturned::Reschedule","value":"NifReturned::Reschedule { fun_name, flags, fun, args }","parent":{"krate":0,"index":188},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":188},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/codegen_runtime.rs","byte_start":19299,"byte_end":19310,"line_start":40,"line_end":40,"column_start":10,"column_end":21},"name":"NifReturned","qualname":"::codegen_runtime::NifReturned","value":"pub enum NifReturned {\n    Term(NIF_TERM),\n    Raise(NIF_TERM),\n    BadArg,\n    Reschedule {\n        fun_name: CString,\n        flags: crate::schedule::SchedulerFlags,\n        fun: unsafe extern \"C\" fn(: NIF_ENV, : i32, : *const NIF_TERM)\n                 -> NIF_TERM,\n        args: Vec<NIF_TERM>,\n    },\n}","parent":null,"children":[{"krate":0,"index":189},{"krate":0,"index":192},{"krate":0,"index":195},{"krate":0,"index":197}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/codegen_runtime.rs","byte_start":19611,"byte_end":19616,"line_start":52,"line_end":52,"column_start":19,"column_end":24},"name":"apply","qualname":"<NifReturned>::apply","value":"pub unsafe fn apply(Self, Env) -> NIF_TERM","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":204},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/codegen_runtime.rs","byte_start":20475,"byte_end":20495,"line_start":79,"line_end":79,"column_start":15,"column_end":35},"name":"handle_nif_init_call","qualname":"::codegen_runtime::handle_nif_init_call","value":"pub unsafe fn handle_nif_init_call(Option<for<'a>fn(: Env, : Term) -> bool>,\n                                   NIF_ENV, NIF_TERM) -> c_int","parent":null,"children":[],"decl_id":null,"docs":" # Unsafe","sig":null,"attributes":[{"value":"/ # Unsafe","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/codegen_runtime.rs","byte_start":20372,"byte_end":20384,"line_start":76,"line_end":76,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/codegen_runtime.rs","byte_start":20385,"byte_end":20388,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ This takes arguments, including raw pointers, that must be correct.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/codegen_runtime.rs","byte_start":20389,"byte_end":20460,"line_start":78,"line_end":78,"column_start":1,"column_end":72}}]},{"kind":"Mod","id":{"krate":0,"index":207},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"types","qualname":"::types","value":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/mod.rs","parent":null,"children":[{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":439},{"krate":0,"index":440},{"krate":0,"index":456},{"krate":0,"index":484},{"krate":0,"index":504},{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":546},{"krate":0,"index":558},{"krate":0,"index":561},{"krate":0,"index":564},{"krate":0,"index":568},{"krate":0,"index":571},{"krate":0,"index":576},{"krate":0,"index":580},{"krate":0,"index":584},{"krate":0,"index":589}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":1288,"byte_end":1300,"line_start":35,"line_end":35,"column_start":1,"column_end":13}}]},{"kind":"Mod","id":{"krate":0,"index":213},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"atom","qualname":"::types::atom","value":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","parent":null,"children":[{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":923},{"krate":0,"index":931},{"krate":0,"index":932},{"krate":0,"index":928},{"krate":0,"index":929},{"krate":0,"index":926},{"krate":0,"index":925},{"krate":0,"index":223},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":237},{"krate":0,"index":240},{"krate":0,"index":243},{"krate":0,"index":246},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":935},{"krate":0,"index":954},{"krate":0,"index":956},{"krate":0,"index":957},{"krate":0,"index":963},{"krate":0,"index":945},{"krate":0,"index":946},{"krate":0,"index":947},{"krate":0,"index":948},{"krate":0,"index":949},{"krate":0,"index":950},{"krate":0,"index":951},{"krate":0,"index":952},{"krate":0,"index":953}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/mod.rs","byte_start":20891,"byte_end":20903,"line_start":3,"line_end":3,"column_start":1,"column_end":13}}]},{"kind":"Struct","id":{"krate":0,"index":923},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":23768,"byte_end":23772,"line_start":8,"line_end":8,"column_start":12,"column_end":16},"name":"Atom","qualname":"::types::atom::Atom","value":"Atom {  }","parent":null,"children":[{"krate":0,"index":924}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":23821,"byte_end":23829,"line_start":13,"line_end":13,"column_start":12,"column_end":20},"name":"as_c_arg","qualname":"<Atom>::as_c_arg","value":"pub fn as_c_arg(Self) -> NIF_TERM","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":23886,"byte_end":23893,"line_start":17,"line_end":17,"column_start":12,"column_end":19},"name":"to_term","qualname":"<Atom>::to_term","value":"pub fn to_term(Self, Env) -> Term","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":24137,"byte_end":24146,"line_start":26,"line_end":26,"column_start":12,"column_end":21},"name":"from_term","qualname":"<Atom>::from_term","value":"pub fn from_term(Term) -> NifResult<Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":24515,"byte_end":24525,"line_start":38,"line_end":38,"column_start":12,"column_end":22},"name":"from_bytes","qualname":"<Atom>::from_bytes","value":"pub fn from_bytes<'a>(Env, &[u8]) -> NifResult<Atom>","parent":null,"children":[],"decl_id":null,"docs":" Return the atom whose text representation is `bytes`, like `erlang:binary_to_atom/2`.","sig":null,"attributes":[{"value":"/ Return the atom whose text representation is `bytes`, like `erlang:binary_to_atom/2`.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":24341,"byte_end":24430,"line_start":34,"line_end":34,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":24435,"byte_end":24438,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":24443,"byte_end":24455,"line_start":36,"line_end":36,"column_start":5,"column_end":17}},{"value":"/ `Error::BadArg` if `bytes.len() > 255`.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":24460,"byte_end":24503,"line_start":37,"line_end":37,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":24983,"byte_end":24997,"line_start":49,"line_end":49,"column_start":12,"column_end":26},"name":"try_from_bytes","qualname":"<Atom>::try_from_bytes","value":"pub fn try_from_bytes<'a>(Env, &[u8]) -> NifResult<Option<Atom>>","parent":null,"children":[],"decl_id":null,"docs":" Return the atom whose text representation is `bytes`, like `erlang:binary_to_existing_atom/2`, if atom with given text representation exists.","sig":null,"attributes":[{"value":"/ Return the atom whose text representation is `bytes`, like `erlang:binary_to_existing_atom/2`, if atom with given text representation exists.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":24753,"byte_end":24898,"line_start":45,"line_end":45,"column_start":5,"column_end":150}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":24903,"byte_end":24906,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":24911,"byte_end":24923,"line_start":47,"line_end":47,"column_start":5,"column_end":17}},{"value":"/ `Error::BadArg` if `bytes.len() > 255`.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":24928,"byte_end":24971,"line_start":48,"line_end":48,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":25642,"byte_end":25650,"line_start":66,"line_end":66,"column_start":12,"column_end":20},"name":"from_str","qualname":"<Atom>::from_str","value":"pub fn from_str<'a>(Env, &str) -> NifResult<Atom>","parent":null,"children":[],"decl_id":null,"docs":" Return the atom whose text representation is the given `string`, like `erlang:list_to_atom/2`.","sig":null,"attributes":[{"value":"/ Return the atom whose text representation is the given `string`, like `erlang:list_to_atom/2`.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":25360,"byte_end":25458,"line_start":61,"line_end":61,"column_start":5,"column_end":103}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":25463,"byte_end":25466,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":25471,"byte_end":25483,"line_start":63,"line_end":63,"column_start":5,"column_end":17}},{"value":"/ `Error::BadArg` if `string` contains characters that aren't in Latin-1, or if it's too","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":25488,"byte_end":25578,"line_start":64,"line_end":64,"column_start":5,"column_end":95}},{"value":"/ long. The maximum length is 255 characters.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":25583,"byte_end":25630,"line_start":65,"line_end":65,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":27060,"byte_end":27074,"line_start":117,"line_end":117,"column_start":12,"column_end":26},"name":"atom_to_string","qualname":"<Term>::atom_to_string","value":"pub fn atom_to_string(&Self) -> NifResult<String>","parent":null,"children":[],"decl_id":null,"docs":" When the term is an atom, this method will return the string\n representation of it.","sig":null,"attributes":[{"value":"/ When the term is an atom, this method will return the string","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":26785,"byte_end":26849,"line_start":110,"line_end":110,"column_start":5,"column_end":69}},{"value":"/ representation of it.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":26854,"byte_end":26879,"line_start":111,"line_end":111,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":26884,"byte_end":26887,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ If you only need to test for equality, comparing the terms directly","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":26892,"byte_end":26963,"line_start":113,"line_end":113,"column_start":5,"column_end":76}},{"value":"/ is much faster.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":26968,"byte_end":26987,"line_start":114,"line_end":114,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":26992,"byte_end":26995,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ Will return None if the term is not an atom.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":27000,"byte_end":27048,"line_start":116,"line_end":116,"column_start":5,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":249},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":27199,"byte_end":27208,"line_start":122,"line_end":122,"column_start":8,"column_end":17},"name":"is_truthy","qualname":"::types::atom::is_truthy","value":"pub fn is_truthy(Term) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":945},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":30785,"byte_end":30788,"line_start":238,"line_end":238,"column_start":10,"column_end":13},"name":"nil","qualname":"::types::atom::nil","value":"pub fn nil() -> crate::types::atom::Atom","parent":null,"children":[],"decl_id":null,"docs":" The `nil` atom.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":946},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":30856,"byte_end":30858,"line_start":241,"line_end":241,"column_start":10,"column_end":12},"name":"ok","qualname":"::types::atom::ok","value":"pub fn ok() -> crate::types::atom::Atom","parent":null,"children":[],"decl_id":null,"docs":" The `ok` atom, commonly used in success tuples.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":947},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":30927,"byte_end":30932,"line_start":244,"line_end":244,"column_start":10,"column_end":15},"name":"error","qualname":"::types::atom::error","value":"pub fn error() -> crate::types::atom::Atom","parent":null,"children":[],"decl_id":null,"docs":" The `error` atom, commonly used in error tuples.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":948},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":31076,"byte_end":31082,"line_start":248,"line_end":248,"column_start":10,"column_end":16},"name":"badarg","qualname":"::types::atom::badarg","value":"pub fn badarg() -> crate::types::atom::Atom","parent":null,"children":[],"decl_id":null,"docs":" The `badarg` atom, which Rustler sometimes returns to indicate that a function was\n called with incorrect arguments.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":949},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":31315,"byte_end":31321,"line_start":254,"line_end":254,"column_start":10,"column_end":16},"name":"false_","qualname":"::types::atom::false_","value":"pub fn false_() -> crate::types::atom::Atom","parent":null,"children":[],"decl_id":null,"docs":" The `false` atom. (Trailing underscore because `false` is a keyword in Rust.)","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":950},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":31562,"byte_end":31567,"line_start":260,"line_end":260,"column_start":10,"column_end":15},"name":"true_","qualname":"::types::atom::true_","value":"pub fn true_() -> crate::types::atom::Atom","parent":null,"children":[],"decl_id":null,"docs":" The `true` atom. (Trailing underscore because `true` is a keyword in Rust.)","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":951},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":31634,"byte_end":31644,"line_start":263,"line_end":263,"column_start":10,"column_end":20},"name":"__struct__","qualname":"::types::atom::__struct__","value":"pub fn __struct__() -> crate::types::atom::Atom","parent":null,"children":[],"decl_id":null,"docs":" The `__struct__` atom used by Elixir.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":952},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":31705,"byte_end":31710,"line_start":266,"line_end":266,"column_start":10,"column_end":15},"name":"first","qualname":"::types::atom::first","value":"pub fn first() -> crate::types::atom::Atom","parent":null,"children":[],"decl_id":null,"docs":" The `first` atom used by `Elixir.Range`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":953},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":31770,"byte_end":31774,"line_start":269,"line_end":269,"column_start":10,"column_end":14},"name":"last","qualname":"::types::atom::last","value":"pub fn last() -> crate::types::atom::Atom","parent":null,"children":[],"decl_id":null,"docs":" The `last` atom used by `Elixir.Range`.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":255},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"binary","qualname":"::types::binary","value":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","parent":null,"children":[{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":278},{"krate":0,"index":289},{"krate":0,"index":291},{"krate":0,"index":293},{"krate":0,"index":296},{"krate":0,"index":298},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":305},{"krate":0,"index":315},{"krate":0,"index":318},{"krate":0,"index":322},{"krate":0,"index":325},{"krate":0,"index":329}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":275},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":32040,"byte_end":32051,"line_start":11,"line_end":11,"column_start":12,"column_end":23},"name":"OwnedBinary","qualname":"::types::binary::OwnedBinary","value":"OwnedBinary {  }","parent":null,"children":[{"krate":0,"index":276},{"krate":0,"index":277}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":32142,"byte_end":32150,"line_start":17,"line_end":17,"column_start":19,"column_end":27},"name":"from_raw","qualname":"<OwnedBinary>::from_raw","value":"pub unsafe fn from_raw(ErlNifBinary) -> OwnedBinary","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":32499,"byte_end":32502,"line_start":28,"line_end":28,"column_start":12,"column_end":15},"name":"new","qualname":"<OwnedBinary>::new","value":"pub fn new(usize) -> Option<OwnedBinary>","parent":null,"children":[],"decl_id":null,"docs":" Allocates a new OwnedBinary with size `size`.","sig":null,"attributes":[{"value":"/ Allocates a new OwnedBinary with size `size`.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":32278,"byte_end":32327,"line_start":24,"line_end":24,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":32332,"byte_end":32335,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ Note that the memory is not initially guaranteed to be any particular value.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":32340,"byte_end":32420,"line_start":26,"line_end":26,"column_start":5,"column_end":85}},{"value":"/ If an empty buffer is needed, you should manually zero it.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":32425,"byte_end":32487,"line_start":27,"line_end":27,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":32715,"byte_end":32727,"line_start":36,"line_end":36,"column_start":12,"column_end":24},"name":"from_unowned","qualname":"<OwnedBinary>::from_unowned","value":"pub fn from_unowned(&Binary) -> Option<OwnedBinary>","parent":null,"children":[],"decl_id":null,"docs":" Copies a given `Binary`.\n","sig":null,"attributes":[{"value":"/ Copies a given `Binary`.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":32675,"byte_end":32703,"line_start":35,"line_end":35,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":33361,"byte_end":33368,"line_start":55,"line_end":55,"column_start":12,"column_end":19},"name":"realloc","qualname":"<OwnedBinary>::realloc","value":"pub fn realloc(&mut Self, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Attempts to reallocate the buffer with the new size.\n Returns false if the buffer cannot be reallocated.\n","sig":null,"attributes":[{"value":"/ Attempts to reallocate the buffer with the new size.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":33218,"byte_end":33274,"line_start":52,"line_end":52,"column_start":5,"column_end":61}},{"value":"/ Returns false if the buffer cannot be reallocated.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":33279,"byte_end":33333,"line_start":53,"line_end":53,"column_start":5,"column_end":59}},{"value":"must_use","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":33338,"byte_end":33349,"line_start":54,"line_end":54,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":285},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":33731,"byte_end":33746,"line_start":64,"line_end":64,"column_start":12,"column_end":27},"name":"realloc_or_copy","qualname":"<OwnedBinary>::realloc_or_copy","value":"pub fn realloc_or_copy(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Attempts to reallocate the buffer with the new size.\n If reallocation fails, it will perform a copy instead.\n Memory outside the range of the original buffer will\n not be initialized. If this needs to be empty, clear it manually.\n","sig":null,"attributes":[{"value":"/ Attempts to reallocate the buffer with the new size.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":33464,"byte_end":33520,"line_start":59,"line_end":59,"column_start":5,"column_end":61}},{"value":"/ If reallocation fails, it will perform a copy instead.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":33525,"byte_end":33583,"line_start":60,"line_end":60,"column_start":5,"column_end":63}},{"value":"/ Memory outside the range of the original buffer will","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":33589,"byte_end":33645,"line_start":62,"line_end":62,"column_start":5,"column_end":61}},{"value":"/ not be initialized. If this needs to be empty, clear it manually.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":33650,"byte_end":33719,"line_start":63,"line_end":63,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":34274,"byte_end":34282,"line_start":78,"line_end":78,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<OwnedBinary>::as_slice","value":"pub fn as_slice(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":34404,"byte_end":34416,"line_start":82,"line_end":82,"column_start":12,"column_end":24},"name":"as_mut_slice","qualname":"<OwnedBinary>::as_mut_slice","value":"pub fn as_mut_slice(&mut Self) -> &'a mut [u8]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":34655,"byte_end":34662,"line_start":88,"line_end":88,"column_start":12,"column_end":19},"name":"release","qualname":"<OwnedBinary>::release","value":"pub fn release(Self, Env) -> Binary","parent":null,"children":[],"decl_id":null,"docs":" Releases control of the binary to the VM. After this point\n the binary will be immutable.\n","sig":null,"attributes":[{"value":"/ Releases control of the binary to the VM. After this point","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":34543,"byte_end":34605,"line_start":86,"line_end":86,"column_start":5,"column_end":67}},{"value":"/ the binary will be immutable.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":34610,"byte_end":34643,"line_start":87,"line_end":87,"column_start":5,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":301},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":35418,"byte_end":35424,"line_start":127,"line_end":127,"column_start":12,"column_end":18},"name":"Binary","qualname":"::types::binary::Binary","value":"Binary {  }","parent":null,"children":[{"krate":0,"index":303},{"krate":0,"index":304}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":35617,"byte_end":35627,"line_start":135,"line_end":135,"column_start":12,"column_end":22},"name":"from_owned","qualname":"<Binary>::from_owned","value":"pub fn from_owned(OwnedBinary, Env) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Releases a given `OwnedBinary` to the VM.\n After this point the binary will be immutable.\n","sig":null,"attributes":[{"value":"/ Releases a given `OwnedBinary` to the VM.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":35505,"byte_end":35550,"line_start":133,"line_end":133,"column_start":5,"column_end":50}},{"value":"/ After this point the binary will be immutable.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":35555,"byte_end":35605,"line_start":134,"line_end":134,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":35972,"byte_end":35980,"line_start":149,"line_end":149,"column_start":12,"column_end":20},"name":"to_owned","qualname":"<Binary>::to_owned","value":"pub fn to_owned(&Self) -> Option<OwnedBinary>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":36071,"byte_end":36080,"line_start":153,"line_end":153,"column_start":12,"column_end":21},"name":"from_term","qualname":"<Binary>::from_term","value":"pub fn from_term(Term) -> Result<Self, Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":36556,"byte_end":36567,"line_start":171,"line_end":171,"column_start":12,"column_end":23},"name":"from_iolist","qualname":"<Binary>::from_iolist","value":"pub fn from_iolist(Term) -> Result<Self, Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":311},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":37053,"byte_end":37060,"line_start":189,"line_end":189,"column_start":12,"column_end":19},"name":"to_term","qualname":"<Binary>::to_term","value":"pub fn to_term<'b>(&Self, Env) -> Term","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":313},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":37148,"byte_end":37156,"line_start":193,"line_end":193,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<Binary>::as_slice","value":"pub fn as_slice(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":37364,"byte_end":37378,"line_start":199,"line_end":199,"column_start":12,"column_end":26},"name":"make_subbinary","qualname":"<Binary>::make_subbinary","value":"pub fn make_subbinary(&Self, usize, usize) -> NifResult<Binary>","parent":null,"children":[],"decl_id":null,"docs":" Returns a new view into the same binary.\n This will not copy anything.\n","sig":null,"attributes":[{"value":"/ Returns a new view into the same binary.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":37271,"byte_end":37315,"line_start":197,"line_end":197,"column_start":5,"column_end":49}},{"value":"/ This will not copy anything.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":37320,"byte_end":37352,"line_start":198,"line_end":198,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":38580,"byte_end":38591,"line_start":244,"line_end":244,"column_start":12,"column_end":23},"name":"into_binary","qualname":"<Term>::into_binary","value":"pub fn into_binary(Self) -> NifResult<Binary>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":335},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"list","qualname":"::types::list","value":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","parent":null,"children":[{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":349},{"krate":0,"index":352},{"krate":0,"index":356},{"krate":0,"index":359},{"krate":0,"index":364},{"krate":0,"index":369},{"krate":0,"index":375},{"krate":0,"index":381}],"decl_id":null,"docs":" Utilities used for working with erlang linked lists.","sig":null,"attributes":[{"value":"/ Utilities used for working with erlang linked lists.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":38666,"byte_end":38722,"line_start":1,"line_end":1,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":38723,"byte_end":38726,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Right now the only supported way to read lists are through the ListIterator.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":38727,"byte_end":38807,"line_start":3,"line_end":3,"column_start":1,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":346},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":40381,"byte_end":40393,"line_start":41,"line_end":41,"column_start":12,"column_end":24},"name":"ListIterator","qualname":"::types::list::ListIterator","value":"ListIterator {  }","parent":null,"children":[{"krate":0,"index":348}],"decl_id":null,"docs":" Enables iteration over the items in the list.","sig":null,"attributes":[{"value":"/ Enables iteration over the items in the list.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":38908,"byte_end":38957,"line_start":8,"line_end":8,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":38958,"byte_end":38961,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ Although this behaves like a standard Rust iterator","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":38962,"byte_end":39017,"line_start":10,"line_end":10,"column_start":1,"column_end":56}},{"value":"/ ([book](https://doc.rust-lang.org/book/iterators.html) /","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":39018,"byte_end":39078,"line_start":11,"line_end":11,"column_start":1,"column_end":61}},{"value":"/ [docs](https://doc.rust-lang.org/std/iter/trait.Iterator.html)), there are a couple of tricky","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":39079,"byte_end":39176,"line_start":12,"line_end":12,"column_start":1,"column_end":98}},{"value":"/ parts to using it.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":39177,"byte_end":39199,"line_start":13,"line_end":13,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":39200,"byte_end":39203,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ Because the iterator is an iterator over `Term`s, you need to decode the terms before you","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":39204,"byte_end":39297,"line_start":15,"line_end":15,"column_start":1,"column_end":94}},{"value":"/ can do anything with them.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":39298,"byte_end":39328,"line_start":16,"line_end":16,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":39329,"byte_end":39332,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ ## Example","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":39333,"byte_end":39347,"line_start":18,"line_end":18,"column_start":1,"column_end":15}},{"value":"/ An easy way to decode all terms in a list, is to use the `.map()` function of the iterator, and","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":39348,"byte_end":39447,"line_start":19,"line_end":19,"column_start":1,"column_end":100}},{"value":"/ decode every entry in the list. This will produce an iterator of `Result`s, and will therefore","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":39448,"byte_end":39546,"line_start":20,"line_end":20,"column_start":1,"column_end":99}},{"value":"/ not be directly usable in the way you might immediately expect.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":39547,"byte_end":39614,"line_start":21,"line_end":21,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":39615,"byte_end":39618,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ For this case, the the `.collect()` function of rust iterators is useful, as it can lift","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":39619,"byte_end":39711,"line_start":23,"line_end":23,"column_start":1,"column_end":93}},{"value":"/ the `Result`s out of the list. (Contains extra type annotations for clarity)","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":39712,"byte_end":39792,"line_start":24,"line_end":24,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":39793,"byte_end":39796,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":39797,"byte_end":39804,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"/ # use rustler::{Term, NifResult};","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":39805,"byte_end":39842,"line_start":27,"line_end":27,"column_start":1,"column_end":38}},{"value":"/ # use rustler::types::list::ListIterator;","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":39843,"byte_end":39888,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"/ # fn list_iterator_example(list_term: Term) -> NifResult<Vec<i64>> {","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":39889,"byte_end":39961,"line_start":29,"line_end":29,"column_start":1,"column_end":73}},{"value":"/ let list_iterator: ListIterator = list_term.decode()?;","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":39962,"byte_end":40020,"line_start":30,"line_end":30,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":40021,"byte_end":40024,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ let result: NifResult<Vec<i64>> = list_iterator","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":40025,"byte_end":40076,"line_start":32,"line_end":32,"column_start":1,"column_end":52}},{"value":"/     // Produces an iterator of NifResult<i64>","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":40077,"byte_end":40126,"line_start":33,"line_end":33,"column_start":1,"column_end":50}},{"value":"/     .map(|x| x.decode::<i64>())","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":40127,"byte_end":40162,"line_start":34,"line_end":34,"column_start":1,"column_end":36}},{"value":"/     // Lifts each value out of the result. Returns Ok(Vec<i64>) if successful, the first error","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":40163,"byte_end":40261,"line_start":35,"line_end":35,"column_start":1,"column_end":99}},{"value":"/     // Error(Error) on failure.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":40262,"byte_end":40297,"line_start":36,"line_end":36,"column_start":1,"column_end":36}},{"value":"/     .collect::<NifResult<Vec<i64>>>();","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":40298,"byte_end":40340,"line_start":37,"line_end":37,"column_start":1,"column_end":43}},{"value":"/ # result","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":40341,"byte_end":40353,"line_start":38,"line_end":38,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":40354,"byte_end":40361,"line_start":39,"line_end":39,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":40362,"byte_end":40369,"line_start":40,"line_end":40,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":383},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":42973,"byte_end":42987,"line_start":138,"line_end":138,"column_start":12,"column_end":26},"name":"list_new_empty","qualname":"<Term>::list_new_empty","value":"pub fn list_new_empty(Env) -> Term","parent":null,"children":[],"decl_id":null,"docs":" Returns a new empty list.\n","sig":null,"attributes":[{"value":"/ Returns a new empty list.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":42932,"byte_end":42961,"line_start":137,"line_end":137,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":384},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":43257,"byte_end":43275,"line_start":147,"line_end":147,"column_start":12,"column_end":30},"name":"into_list_iterator","qualname":"<Term>::into_list_iterator","value":"pub fn into_list_iterator(Self) -> NifResult<ListIterator>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over a list term.\n See documentation for ListIterator for more information.","sig":null,"attributes":[{"value":"/ Returns an iterator over a list term.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":43083,"byte_end":43124,"line_start":143,"line_end":143,"column_start":5,"column_end":46}},{"value":"/ See documentation for ListIterator for more information.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":43129,"byte_end":43189,"line_start":144,"line_end":144,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":43194,"byte_end":43197,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ Returns None if the term is not a list.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":43202,"byte_end":43245,"line_start":146,"line_end":146,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":385},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":43579,"byte_end":43590,"line_start":159,"line_end":159,"column_start":12,"column_end":23},"name":"list_length","qualname":"<Term>::list_length","value":"pub fn list_length(Self) -> NifResult<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of a list term.","sig":null,"attributes":[{"value":"/ Returns the length of a list term.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":43379,"byte_end":43417,"line_start":151,"line_end":151,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":43422,"byte_end":43425,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ Returns None if the term is not a list.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":43430,"byte_end":43473,"line_start":153,"line_end":153,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":43478,"byte_end":43481,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ ### Elixir equivalent","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":43486,"byte_end":43511,"line_start":155,"line_end":155,"column_start":5,"column_end":30}},{"value":"/ ```elixir","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":43516,"byte_end":43529,"line_start":156,"line_end":156,"column_start":5,"column_end":18}},{"value":"/ length(self_term)","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":43534,"byte_end":43555,"line_start":157,"line_end":157,"column_start":5,"column_end":26}},{"value":"/ ```","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":43560,"byte_end":43567,"line_start":158,"line_end":158,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":386},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":44051,"byte_end":44064,"line_start":174,"line_end":174,"column_start":12,"column_end":25},"name":"list_get_cell","qualname":"<Term>::list_get_cell","value":"pub fn list_get_cell(Self) -> NifResult<(Term, Term)>","parent":null,"children":[],"decl_id":null,"docs":" Unpacks a single cell at the head of a list term,\n and returns the result as a tuple of (head, tail).","sig":null,"attributes":[{"value":"/ Unpacks a single cell at the head of a list term,","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":43749,"byte_end":43802,"line_start":164,"line_end":164,"column_start":5,"column_end":58}},{"value":"/ and returns the result as a tuple of (head, tail).","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":43807,"byte_end":43861,"line_start":165,"line_end":165,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":43866,"byte_end":43869,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ Returns None if the term is not a list.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":43874,"byte_end":43917,"line_start":167,"line_end":167,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":43922,"byte_end":43925,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ ### Elixir equivalent","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":43930,"byte_end":43955,"line_start":169,"line_end":169,"column_start":5,"column_end":30}},{"value":"/ ```elixir","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":43960,"byte_end":43973,"line_start":170,"line_end":170,"column_start":5,"column_end":18}},{"value":"/ [head, tail] = self_term","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":43978,"byte_end":44006,"line_start":171,"line_end":171,"column_start":5,"column_end":33}},{"value":"/ {head, tail}","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":44011,"byte_end":44027,"line_start":172,"line_end":172,"column_start":5,"column_end":21}},{"value":"/ ```","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":44032,"byte_end":44039,"line_start":173,"line_end":173,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":44494,"byte_end":44506,"line_start":186,"line_end":186,"column_start":12,"column_end":24},"name":"list_reverse","qualname":"<Term>::list_reverse","value":"pub fn list_reverse(Self) -> NifResult<Term>","parent":null,"children":[],"decl_id":null,"docs":" Makes a copy of the self list term and reverses it.","sig":null,"attributes":[{"value":"/ Makes a copy of the self list term and reverses it.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":44357,"byte_end":44412,"line_start":183,"line_end":183,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":44417,"byte_end":44420,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ Returns Err(Error::BadArg) if the term is not a list.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":44425,"byte_end":44482,"line_start":185,"line_end":185,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":44824,"byte_end":44836,"line_start":196,"line_end":196,"column_start":12,"column_end":24},"name":"list_prepend","qualname":"<Term>::list_prepend","value":"pub fn list_prepend(Self, Term) -> Term","parent":null,"children":[],"decl_id":null,"docs":" Adds `head` in a list cell with `self` as tail.\n","sig":null,"attributes":[{"value":"/ Adds `head` in a list cell with `self` as tail.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":44761,"byte_end":44812,"line_start":195,"line_end":195,"column_start":5,"column_end":56}}]},{"kind":"Mod","id":{"krate":0,"index":392},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"map","qualname":"::types::map","value":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","parent":null,"children":[{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":400},{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":416},{"krate":0,"index":420},{"krate":0,"index":424},{"krate":0,"index":427},{"krate":0,"index":432},{"krate":0,"index":435}],"decl_id":null,"docs":" Utilities used to access and create Erlang maps.\n","sig":null,"attributes":[{"value":"/ Utilities used to access and create Erlang maps.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":45071,"byte_end":45123,"line_start":1,"line_end":1,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":402},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":45256,"byte_end":45263,"line_start":8,"line_end":8,"column_start":8,"column_end":15},"name":"map_new","qualname":"::types::map::map_new","value":"pub fn map_new(Env) -> Term","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":405},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":45517,"byte_end":45524,"line_start":20,"line_end":20,"column_start":12,"column_end":19},"name":"map_new","qualname":"<Term>::map_new","value":"pub fn map_new(Env) -> Term","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new, empty map term.","sig":null,"attributes":[{"value":"/ Constructs a new, empty map term.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":45388,"byte_end":45425,"line_start":14,"line_end":14,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":45430,"byte_end":45433,"line_start":15,"line_end":15,"column_start":5,"column_end":8}},{"value":"/ ### Elixir equivalent","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":45438,"byte_end":45463,"line_start":16,"line_end":16,"column_start":5,"column_end":30}},{"value":"/ ```elixir","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":45468,"byte_end":45481,"line_start":17,"line_end":17,"column_start":5,"column_end":18}},{"value":"/ %{}","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":45486,"byte_end":45493,"line_start":18,"line_end":18,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":45498,"byte_end":45505,"line_start":19,"line_end":19,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":45778,"byte_end":45793,"line_start":31,"line_end":31,"column_start":12,"column_end":27},"name":"map_from_arrays","qualname":"<Term>::map_from_arrays","value":"pub fn map_from_arrays(Env, &[Term], &[Term]) -> NifResult<Term>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new map from two vectors","sig":null,"attributes":[{"value":"/ Construct a new map from two vectors","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":45585,"byte_end":45625,"line_start":24,"line_end":24,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":45630,"byte_end":45633,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ ### Elixir equivalent","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":45638,"byte_end":45663,"line_start":26,"line_end":26,"column_start":5,"column_end":30}},{"value":"/ ```elixir","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":45668,"byte_end":45681,"line_start":27,"line_end":27,"column_start":5,"column_end":18}},{"value":"/ List.zip(keys, values) |> Map.new()","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":45686,"byte_end":45725,"line_start":28,"line_end":28,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":45730,"byte_end":45737,"line_start":29,"line_end":29,"column_start":5,"column_end":12}},{"value":"cfg(nif_version_2_14)","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":45742,"byte_end":45766,"line_start":30,"line_end":30,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":411},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":47008,"byte_end":47015,"line_start":71,"line_end":71,"column_start":12,"column_end":19},"name":"map_get","qualname":"<Term>::map_get","value":"pub fn map_get(Self, Term) -> NifResult<Term>","parent":null,"children":[],"decl_id":null,"docs":" Gets the value corresponding to a key in a map term.","sig":null,"attributes":[{"value":"/ Gets the value corresponding to a key in a map term.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":46728,"byte_end":46784,"line_start":62,"line_end":62,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":46789,"byte_end":46792,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ Returns Err(Error::BadArg) if the term is not a map or if","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":46797,"byte_end":46858,"line_start":64,"line_end":64,"column_start":5,"column_end":66}},{"value":"/ key doesn't exist in the map.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":46863,"byte_end":46896,"line_start":65,"line_end":65,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":46901,"byte_end":46904,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ ### Elixir equivalent","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":46909,"byte_end":46934,"line_start":67,"line_end":67,"column_start":5,"column_end":30}},{"value":"/ ```elixir","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":46939,"byte_end":46952,"line_start":68,"line_end":68,"column_start":5,"column_end":18}},{"value":"/ Map.get(self_term, key)","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":46957,"byte_end":46984,"line_start":69,"line_end":69,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":46989,"byte_end":46996,"line_start":70,"line_end":70,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":412},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":47522,"byte_end":47530,"line_start":87,"line_end":87,"column_start":12,"column_end":20},"name":"map_size","qualname":"<Term>::map_size","value":"pub fn map_size(Self) -> NifResult<usize>","parent":null,"children":[],"decl_id":null,"docs":" Gets the size of a map term.","sig":null,"attributes":[{"value":"/ Gets the size of a map term.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":47313,"byte_end":47345,"line_start":79,"line_end":79,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":47350,"byte_end":47353,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ Returns Err(Error::BadArg) if the term is not a map.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":47358,"byte_end":47414,"line_start":81,"line_end":81,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":47419,"byte_end":47422,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ ### Elixir equivalent","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":47427,"byte_end":47452,"line_start":83,"line_end":83,"column_start":5,"column_end":30}},{"value":"/ ```elixir","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":47457,"byte_end":47470,"line_start":84,"line_end":84,"column_start":5,"column_end":18}},{"value":"/ map_size(self_term)","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":47475,"byte_end":47498,"line_start":85,"line_end":85,"column_start":5,"column_end":28}},{"value":"/ ```","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":47503,"byte_end":47510,"line_start":86,"line_end":86,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":413},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":47999,"byte_end":48006,"line_start":101,"line_end":101,"column_start":12,"column_end":19},"name":"map_put","qualname":"<Term>::map_put","value":"pub fn map_put(Self, Term, Term) -> NifResult<Term>","parent":null,"children":[],"decl_id":null,"docs":" Makes a copy of the self map term and sets key to value.\n If the value already exists, it is overwritten.","sig":null,"attributes":[{"value":"/ Makes a copy of the self map term and sets key to value.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":47695,"byte_end":47755,"line_start":92,"line_end":92,"column_start":5,"column_end":65}},{"value":"/ If the value already exists, it is overwritten.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":47760,"byte_end":47811,"line_start":93,"line_end":93,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":47816,"byte_end":47819,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ Returns Err(Error::BadArg) if the term is not a map.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":47824,"byte_end":47880,"line_start":95,"line_end":95,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":47885,"byte_end":47888,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ ### Elixir equivalent","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":47893,"byte_end":47918,"line_start":97,"line_end":97,"column_start":5,"column_end":30}},{"value":"/ ```elixir","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":47923,"byte_end":47936,"line_start":98,"line_end":98,"column_start":5,"column_end":18}},{"value":"/ Map.put(self_term, key, value)","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":47941,"byte_end":47975,"line_start":99,"line_end":99,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":47980,"byte_end":47987,"line_start":100,"line_end":100,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":414},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":48998,"byte_end":49008,"line_start":135,"line_end":135,"column_start":12,"column_end":22},"name":"map_remove","qualname":"<Term>::map_remove","value":"pub fn map_remove(Self, Term) -> NifResult<Term>","parent":null,"children":[],"decl_id":null,"docs":" Makes a copy of the self map term and removes key. If the key\n doesn't exist, the original map is returned.","sig":null,"attributes":[{"value":"/ Makes a copy of the self map term and removes key. If the key","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":48696,"byte_end":48761,"line_start":126,"line_end":126,"column_start":5,"column_end":70}},{"value":"/ doesn't exist, the original map is returned.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":48766,"byte_end":48814,"line_start":127,"line_end":127,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":48819,"byte_end":48822,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ Returns Err(Error::BadArg) if the term is not a map.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":48827,"byte_end":48883,"line_start":129,"line_end":129,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":48888,"byte_end":48891,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ ### Elixir equivalent","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":48896,"byte_end":48921,"line_start":131,"line_end":131,"column_start":5,"column_end":30}},{"value":"/ ```elixir","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":48926,"byte_end":48939,"line_start":132,"line_end":132,"column_start":5,"column_end":18}},{"value":"/ Map.delete(self_term, key)","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":48944,"byte_end":48974,"line_start":133,"line_end":133,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":48979,"byte_end":48986,"line_start":134,"line_end":134,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":415},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":49619,"byte_end":49629,"line_start":153,"line_end":153,"column_start":12,"column_end":22},"name":"map_update","qualname":"<Term>::map_update","value":"pub fn map_update(Self, Term, Term) -> NifResult<Term>","parent":null,"children":[],"decl_id":null,"docs":" Makes a copy of the self map term where key is set to value.","sig":null,"attributes":[{"value":"/ Makes a copy of the self map term where key is set to value.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":49442,"byte_end":49506,"line_start":149,"line_end":149,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":49511,"byte_end":49514,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ Returns Err(Error::BadArg) if the term is not a map of if key","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":49519,"byte_end":49584,"line_start":151,"line_end":151,"column_start":5,"column_end":70}},{"value":"/ doesn't exist.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":49589,"byte_end":49607,"line_start":152,"line_end":152,"column_start":5,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":416},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":50343,"byte_end":50354,"line_start":179,"line_end":179,"column_start":12,"column_end":23},"name":"MapIterator","qualname":"::types::map::MapIterator","value":"MapIterator {  }","parent":null,"children":[{"krate":0,"index":418},{"krate":0,"index":419}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":422},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":50454,"byte_end":50457,"line_start":185,"line_end":185,"column_start":12,"column_end":15},"name":"new","qualname":"<MapIterator>::new","value":"pub fn new(Term) -> Option<MapIterator>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":440},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/primitive.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"primitive","qualname":"::types::primitive","value":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/primitive.rs","parent":null,"children":[{"krate":0,"index":441},{"krate":0,"index":442},{"krate":0,"index":443},{"krate":0,"index":444},{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":966},{"krate":0,"index":969},{"krate":0,"index":972},{"krate":0,"index":975},{"krate":0,"index":978},{"krate":0,"index":981},{"krate":0,"index":984},{"krate":0,"index":987},{"krate":0,"index":990},{"krate":0,"index":993},{"krate":0,"index":996},{"krate":0,"index":999},{"krate":0,"index":1002},{"krate":0,"index":1005},{"krate":0,"index":1008},{"krate":0,"index":1011},{"krate":0,"index":1014},{"krate":0,"index":1017},{"krate":0,"index":1020},{"krate":0,"index":1023},{"krate":0,"index":1026},{"krate":0,"index":1029},{"krate":0,"index":1032},{"krate":0,"index":1035},{"krate":0,"index":450},{"krate":0,"index":453}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":456},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/string.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"string","qualname":"::types::string","value":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/string.rs","parent":null,"children":[{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":460},{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":470},{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":478},{"krate":0,"index":481}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":484},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/tuple.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"tuple","qualname":"::types::tuple","value":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/tuple.rs","parent":null,"children":[{"krate":0,"index":485},{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":493},{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":498},{"krate":0,"index":1038},{"krate":0,"index":1041},{"krate":0,"index":1044},{"krate":0,"index":1048},{"krate":0,"index":1052},{"krate":0,"index":1057},{"krate":0,"index":1062},{"krate":0,"index":1068},{"krate":0,"index":1074},{"krate":0,"index":1081},{"krate":0,"index":1088},{"krate":0,"index":1096},{"krate":0,"index":1104},{"krate":0,"index":1113},{"krate":0,"index":1122},{"krate":0,"index":1132}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":495},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/tuple.rs","byte_start":55992,"byte_end":56001,"line_start":18,"line_end":18,"column_start":8,"column_end":17},"name":"get_tuple","qualname":"::types::tuple::get_tuple","value":"pub fn get_tuple<'a>(Term) -> Result<Vec<Term>, Error>","parent":null,"children":[],"decl_id":null,"docs":" ## Tuple terms\n Convert an Erlang tuple to a Rust vector. (To convert to a Rust tuple, use `term.decode()`\n instead.)","sig":null,"attributes":[{"value":"/ ## Tuple terms","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/tuple.rs","byte_start":55700,"byte_end":55718,"line_start":4,"line_end":4,"column_start":1,"column_end":19}},{"value":"/ Convert an Erlang tuple to a Rust vector. (To convert to a Rust tuple, use `term.decode()`","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/tuple.rs","byte_start":55820,"byte_end":55914,"line_start":13,"line_end":13,"column_start":1,"column_end":95}},{"value":"/ instead.)","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/tuple.rs","byte_start":55915,"byte_end":55928,"line_start":14,"line_end":14,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/tuple.rs","byte_start":55929,"byte_end":55932,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/tuple.rs","byte_start":55933,"byte_end":55945,"line_start":16,"line_end":16,"column_start":1,"column_end":13}},{"value":"/ `badarg` if `term` is not a tuple.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/tuple.rs","byte_start":55946,"byte_end":55984,"line_start":17,"line_end":17,"column_start":1,"column_end":39}}]},{"kind":"Function","id":{"krate":0,"index":498},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/tuple.rs","byte_start":56511,"byte_end":56521,"line_start":33,"line_end":33,"column_start":8,"column_end":18},"name":"make_tuple","qualname":"::types::tuple::make_tuple","value":"pub fn make_tuple<'a>(Env, &[Term]) -> Term","parent":null,"children":[],"decl_id":null,"docs":" Convert a vector of terms to an Erlang tuple. (To convert from a Rust tuple to an Erlang tuple,\n use `Encoder` instead.)\n","sig":null,"attributes":[{"value":"/ Convert a vector of terms to an Erlang tuple. (To convert from a Rust tuple to an Erlang tuple,","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/tuple.rs","byte_start":56376,"byte_end":56475,"line_start":31,"line_end":31,"column_start":1,"column_end":100}},{"value":"/ use `Encoder` instead.)","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/tuple.rs","byte_start":56476,"byte_end":56503,"line_start":32,"line_end":32,"column_start":1,"column_end":28}}]},{"kind":"Mod","id":{"krate":0,"index":504},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/pid.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pid","qualname":"::types::pid","value":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/pid.rs","parent":null,"children":[{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507},{"krate":0,"index":508},{"krate":0,"index":509},{"krate":0,"index":510},{"krate":0,"index":511},{"krate":0,"index":512},{"krate":0,"index":513},{"krate":0,"index":514},{"krate":0,"index":515},{"krate":0,"index":1142},{"krate":0,"index":1144},{"krate":0,"index":516},{"krate":0,"index":518},{"krate":0,"index":522},{"krate":0,"index":525}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1142},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/pid.rs","byte_start":59177,"byte_end":59180,"line_start":6,"line_end":6,"column_start":12,"column_end":15},"name":"Pid","qualname":"::types::pid::Pid","value":"Pid {  }","parent":null,"children":[{"krate":0,"index":1143}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":517},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/pid.rs","byte_start":59226,"byte_end":59234,"line_start":11,"line_end":11,"column_start":12,"column_end":20},"name":"as_c_arg","qualname":"<Pid>::as_c_arg","value":"pub fn as_c_arg(&Self) -> &ErlNifPid","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":527},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/pid.rs","byte_start":60044,"byte_end":60047,"line_start":38,"line_end":38,"column_start":12,"column_end":15},"name":"pid","qualname":"<Env>::pid","value":"pub fn pid(Self) -> Pid","parent":null,"children":[],"decl_id":null,"docs":" Return the calling process's pid.","sig":null,"attributes":[{"value":"/ Return the calling process's pid.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/pid.rs","byte_start":59709,"byte_end":59746,"line_start":31,"line_end":31,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/pid.rs","byte_start":59751,"byte_end":59754,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/pid.rs","byte_start":59759,"byte_end":59771,"line_start":33,"line_end":33,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/pid.rs","byte_start":59776,"byte_end":59779,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ Panics if this environment is process-independent.  (The only way to get such an","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/pid.rs","byte_start":59784,"byte_end":59868,"line_start":35,"line_end":35,"column_start":5,"column_end":89}},{"value":"/ environment is to use `OwnedEnv`.  The `Env` that Rustler passes to NIFs when they're","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/pid.rs","byte_start":59873,"byte_end":59962,"line_start":36,"line_end":36,"column_start":5,"column_end":94}},{"value":"/ called is always associated with the calling Erlang process.)","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/pid.rs","byte_start":59967,"byte_end":60032,"line_start":37,"line_end":37,"column_start":5,"column_end":70}}]},{"kind":"Mod","id":{"krate":0,"index":529},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/truthy.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"truthy","qualname":"::types::truthy","value":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/truthy.rs","parent":null,"children":[{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":535},{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":540},{"krate":0,"index":543}],"decl_id":null,"docs":"\n A type to represent a truthy value.","sig":null,"attributes":[{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/truthy.rs","byte_start":60346,"byte_end":60349,"line_start":1,"line_end":1,"column_start":1,"column_end":4}},{"value":"/ A type to represent a truthy value.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/truthy.rs","byte_start":60350,"byte_end":60389,"line_start":2,"line_end":2,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/truthy.rs","byte_start":60390,"byte_end":60393,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ In Elixir, a term which does not equal `:false` or `:nil` is considered to be","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/truthy.rs","byte_start":60394,"byte_end":60475,"line_start":4,"line_end":4,"column_start":1,"column_end":82}},{"value":"/ truthy. This does not cleanly map to Rust's `bool` type. To distinguish between","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/truthy.rs","byte_start":60476,"byte_end":60559,"line_start":5,"line_end":5,"column_start":1,"column_end":84}},{"value":"/ `bool` and a truthy value, the newtype `Truthy` can be used.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/truthy.rs","byte_start":60560,"byte_end":60624,"line_start":6,"line_end":6,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/truthy.rs","byte_start":60625,"byte_end":60628,"line_start":7,"line_end":7,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":537},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/truthy.rs","byte_start":60719,"byte_end":60725,"line_start":12,"line_end":12,"column_start":12,"column_end":18},"name":"Truthy","qualname":"::types::truthy::Truthy","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":546},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/elixir_struct.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"elixir_struct","qualname":"::types::elixir_struct","value":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/elixir_struct.rs","parent":null,"children":[{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":553},{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":556}],"decl_id":null,"docs":" Utilities used to create and access data specific to Elixir structs. Keep in mind that an\n Elixir struct is a normal Erlang map, and functions from the `map` module can be used.","sig":null,"attributes":[{"value":"/ Utilities used to create and access data specific to Elixir structs. Keep in mind that an","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/elixir_struct.rs","byte_start":60987,"byte_end":61080,"line_start":1,"line_end":1,"column_start":1,"column_end":94}},{"value":"/ Elixir struct is a normal Erlang map, and functions from the `map` module can be used.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/elixir_struct.rs","byte_start":61081,"byte_end":61171,"line_start":2,"line_end":2,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/elixir_struct.rs","byte_start":61172,"byte_end":61175,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ # Elixir struct transcoders","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/elixir_struct.rs","byte_start":61176,"byte_end":61207,"line_start":4,"line_end":4,"column_start":1,"column_end":32}},{"value":"/ The compiler plugin has functionality for automatically generating a transcoder that can decode","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/elixir_struct.rs","byte_start":61208,"byte_end":61307,"line_start":5,"line_end":5,"column_start":1,"column_end":100}},{"value":"/ and encode a Rust struct to an Elixir struct. To do so, simply annotate a struct with","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/elixir_struct.rs","byte_start":61308,"byte_end":61397,"line_start":6,"line_end":6,"column_start":1,"column_end":90}},{"value":"/ `#[derive(NifStruct)]","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/elixir_struct.rs","byte_start":61398,"byte_end":61423,"line_start":7,"line_end":7,"column_start":1,"column_end":26}},{"value":"/ `#[module = \"Elixir.TheStructModule\"]`.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/elixir_struct.rs","byte_start":61424,"byte_end":61467,"line_start":8,"line_end":8,"column_start":1,"column_end":44}}]},{"kind":"Function","id":{"krate":0,"index":555},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/elixir_struct.rs","byte_start":61568,"byte_end":61586,"line_start":14,"line_end":14,"column_start":8,"column_end":26},"name":"get_ex_struct_name","qualname":"::types::elixir_struct::get_ex_struct_name","value":"pub fn get_ex_struct_name(Term) -> NifResult<Atom>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":556},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/elixir_struct.rs","byte_start":61822,"byte_end":61836,"line_start":21,"line_end":21,"column_start":8,"column_end":22},"name":"make_ex_struct","qualname":"::types::elixir_struct::make_ex_struct","value":"pub fn make_ex_struct<'a>(Env, &str) -> NifResult<Term>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":558},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/mod.rs","byte_start":21372,"byte_end":21379,"line_start":33,"line_end":33,"column_start":11,"column_end":18},"name":"Encoder","qualname":"::types::Encoder","value":"Encoder","parent":null,"children":[{"krate":0,"index":559}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":559},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/mod.rs","byte_start":21389,"byte_end":21395,"line_start":34,"line_end":34,"column_start":8,"column_end":14},"name":"encode","qualname":"::types::Encoder::encode","value":"pub fn encode<'a>(&Self, Env) -> Term","parent":{"krate":0,"index":558},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":561},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/mod.rs","byte_start":21446,"byte_end":21453,"line_start":36,"line_end":36,"column_start":11,"column_end":18},"name":"Decoder","qualname":"::types::Decoder","value":"Decoder<'a>: Sized + 'a","parent":null,"children":[{"krate":0,"index":563}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":563},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/mod.rs","byte_start":21479,"byte_end":21485,"line_start":37,"line_end":37,"column_start":8,"column_end":14},"name":"decode","qualname":"::types::Decoder::decode","value":"pub fn decode(Term) -> NifResult<Self>","parent":{"krate":0,"index":561},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1146},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":62553,"byte_end":62557,"line_start":13,"line_end":13,"column_start":12,"column_end":16},"name":"Term","qualname":"::term::Term","value":"Term {  }","parent":null,"children":[{"krate":0,"index":1148},{"krate":0,"index":1149}],"decl_id":null,"docs":" Term is used to represent all erlang terms. Terms are always lifetime limited by a Env.","sig":null,"attributes":[{"value":"/ Term is used to represent all erlang terms. Terms are always lifetime limited by a Env.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":62313,"byte_end":62404,"line_start":8,"line_end":8,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":62405,"byte_end":62408,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ Term is cloneable and copyable, but it can not exist outside of the lifetime of the Env","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":62409,"byte_end":62500,"line_start":10,"line_end":10,"column_start":1,"column_end":92}},{"value":"/ that owns it.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":62501,"byte_end":62518,"line_start":11,"line_end":11,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":612},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":63004,"byte_end":63007,"line_start":30,"line_end":30,"column_start":19,"column_end":22},"name":"new","qualname":"<Term>::new","value":"pub unsafe fn new(Env, NIF_TERM) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `Term` from a raw `NIF_TERM`.","sig":null,"attributes":[{"value":"/ Create a `Term` from a raw `NIF_TERM`.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":62792,"byte_end":62834,"line_start":25,"line_end":25,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":62839,"byte_end":62842,"line_start":26,"line_end":26,"column_start":5,"column_end":8}},{"value":"/ # Unsafe","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":62847,"byte_end":62859,"line_start":27,"line_end":27,"column_start":5,"column_end":17}},{"value":"/ The caller must ensure that `env` is the environment that `inner` belongs to,","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":62864,"byte_end":62945,"line_start":28,"line_end":28,"column_start":5,"column_end":86}},{"value":"/ unless `inner` is an atom term.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":62950,"byte_end":62985,"line_start":29,"line_end":29,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":613},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":63245,"byte_end":63253,"line_start":35,"line_end":35,"column_start":12,"column_end":20},"name":"as_c_arg","qualname":"<Term>::as_c_arg","value":"pub fn as_c_arg(&Self) -> NIF_TERM","parent":null,"children":[],"decl_id":null,"docs":" This extracts the raw term pointer. It is usually used in order to obtain a type that can\n be passed to calls into the erlang vm.\n","sig":null,"attributes":[{"value":"/ This extracts the raw term pointer. It is usually used in order to obtain a type that can","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":63093,"byte_end":63186,"line_start":33,"line_end":33,"column_start":5,"column_end":98}},{"value":"/ be passed to calls into the erlang vm.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":63191,"byte_end":63233,"line_start":34,"line_end":34,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":614},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":63311,"byte_end":63318,"line_start":39,"line_end":39,"column_start":12,"column_end":19},"name":"get_env","qualname":"<Term>::get_env","value":"pub fn get_env(&Self) -> Env","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":615},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":63574,"byte_end":63580,"line_start":47,"line_end":47,"column_start":12,"column_end":18},"name":"in_env","qualname":"<Term>::in_env","value":"pub fn in_env<'b>(&Self, Env) -> Term","parent":null,"children":[],"decl_id":null,"docs":" Returns a representation of self in the given Env.","sig":null,"attributes":[{"value":"/ Returns a representation of self in the given Env.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":63367,"byte_end":63421,"line_start":43,"line_end":43,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":63426,"byte_end":63429,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ If the term is already is in the provided env, it will be directly returned. Otherwise","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":63434,"byte_end":63524,"line_start":45,"line_end":45,"column_start":5,"column_end":95}},{"value":"/ the term will be copied over.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":63529,"byte_end":63562,"line_start":46,"line_end":46,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":617},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":64512,"byte_end":64518,"line_start":74,"line_end":74,"column_start":12,"column_end":18},"name":"decode","qualname":"<Term>::decode","value":"pub fn decode<T>(Self) -> NifResult<T> where T: Decoder","parent":null,"children":[],"decl_id":null,"docs":" Decodes the Term into type T.","sig":null,"attributes":[{"value":"/ Decodes the Term into type T.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":64235,"byte_end":64268,"line_start":64,"line_end":64,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":64273,"byte_end":64276,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ This should be used as the primary method of extracting the value from a Term.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":64281,"byte_end":64363,"line_start":66,"line_end":66,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":64368,"byte_end":64371,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":64376,"byte_end":64390,"line_start":68,"line_end":68,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":64395,"byte_end":64398,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ ```ignore","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":64403,"byte_end":64416,"line_start":70,"line_end":70,"column_start":5,"column_end":18}},{"value":"/ let term: Term = ...;","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":64421,"byte_end":64446,"line_start":71,"line_end":71,"column_start":5,"column_end":30}},{"value":"/ let number: i32 = term.decode()?;","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":64451,"byte_end":64488,"line_start":72,"line_end":72,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":64493,"byte_end":64500,"line_start":73,"line_end":73,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":619},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":64834,"byte_end":64850,"line_start":87,"line_end":87,"column_start":12,"column_end":28},"name":"decode_as_binary","qualname":"<Term>::decode_as_binary","value":"pub fn decode_as_binary(Self) -> NifResult<Binary>","parent":null,"children":[],"decl_id":null,"docs":" Decodes the Term into Binary","sig":null,"attributes":[{"value":"/ Decodes the Term into Binary","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":64625,"byte_end":64657,"line_start":81,"line_end":81,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":64662,"byte_end":64665,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ This could be used as a replacement for [`decode`] when decoding Binary from an iolist","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":64670,"byte_end":64760,"line_start":83,"line_end":83,"column_start":5,"column_end":95}},{"value":"/ is needed.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":64765,"byte_end":64779,"line_start":84,"line_end":84,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":64784,"byte_end":64787,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ [`decode`]: #method.decode","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":64792,"byte_end":64822,"line_start":86,"line_end":86,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":620},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":65020,"byte_end":65029,"line_start":94,"line_end":94,"column_start":12,"column_end":21},"name":"to_binary","qualname":"<Term>::to_binary","value":"pub fn to_binary(Self) -> OwnedBinary","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":647},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"resource","qualname":"::resource","value":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","parent":null,"children":[{"krate":0,"index":648},{"krate":0,"index":1587},{"krate":0,"index":649},{"krate":0,"index":650},{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":653},{"krate":0,"index":654},{"krate":0,"index":655},{"krate":0,"index":656},{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":659},{"krate":0,"index":660},{"krate":0,"index":661},{"krate":0,"index":662},{"krate":0,"index":663},{"krate":0,"index":664},{"krate":0,"index":665},{"krate":0,"index":666},{"krate":0,"index":670},{"krate":0,"index":672},{"krate":0,"index":676},{"krate":0,"index":680},{"krate":0,"index":682},{"krate":0,"index":686},{"krate":0,"index":688},{"krate":0,"index":690},{"krate":0,"index":694},{"krate":0,"index":696},{"krate":0,"index":698},{"krate":0,"index":706},{"krate":0,"index":710},{"krate":0,"index":713}],"decl_id":null,"docs":" Support for storing Rust data in Erlang terms.","sig":null,"attributes":[{"value":"/ Support for storing Rust data in Erlang terms.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":65993,"byte_end":66043,"line_start":1,"line_end":1,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":66044,"byte_end":66047,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ A NIF resource allows you to safely store Rust structs in a term, and therefore keep it across","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":66048,"byte_end":66146,"line_start":3,"line_end":3,"column_start":1,"column_end":99}},{"value":"/ NIF calls. The struct will be automatically dropped when the BEAM GC decides that there are no","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":66147,"byte_end":66245,"line_start":4,"line_end":4,"column_start":1,"column_end":99}},{"value":"/ more references to the resource.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":66246,"byte_end":66282,"line_start":5,"line_end":5,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":666},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":66982,"byte_end":66994,"line_start":27,"line_end":27,"column_start":12,"column_end":24},"name":"ResourceType","qualname":"::resource::ResourceType","value":"ResourceType { res, struct_type }","parent":null,"children":[{"krate":0,"index":668},{"krate":0,"index":669}],"decl_id":null,"docs":" The ResourceType struct contains a  NIF_RESOURCE_TYPE and a phantom reference to the type it\n is for. It serves as a holder for the information needed to interact with the Erlang VM about\n the resource type.","sig":null,"attributes":[{"value":"/ The ResourceType struct contains a  NIF_RESOURCE_TYPE and a phantom reference to the type it","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":66661,"byte_end":66757,"line_start":21,"line_end":21,"column_start":1,"column_end":97}},{"value":"/ is for. It serves as a holder for the information needed to interact with the Erlang VM about","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":66758,"byte_end":66855,"line_start":22,"line_end":22,"column_start":1,"column_end":98}},{"value":"/ the resource type.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":66856,"byte_end":66878,"line_start":23,"line_end":23,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":66879,"byte_end":66882,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ This is usually stored in an implementation of ResourceTypeProvider.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":66883,"byte_end":66955,"line_start":25,"line_end":25,"column_start":1,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":668},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":67008,"byte_end":67011,"line_start":28,"line_end":28,"column_start":9,"column_end":12},"name":"res","qualname":"::resource::ResourceType::res","value":"*const rustler_sys::ErlNifResourceType","parent":{"krate":0,"index":666},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":669},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":67040,"byte_end":67051,"line_start":29,"line_end":29,"column_start":9,"column_end":20},"name":"struct_type","qualname":"::resource::ResourceType::struct_type","value":"std::marker::PhantomData<T>","parent":{"krate":0,"index":666},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":670},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":67319,"byte_end":67339,"line_start":37,"line_end":37,"column_start":11,"column_end":31},"name":"ResourceTypeProvider","qualname":"::resource::ResourceTypeProvider","value":"ResourceTypeProvider: Sized + Send + Sync + 'static","parent":null,"children":[{"krate":0,"index":671}],"decl_id":null,"docs":" This trait gets implemented for the type we want to put into a resource when\n resource_struct_init! is called on it. It provides the ResourceType.","sig":null,"attributes":[{"value":"/ This trait gets implemented for the type we want to put into a resource when","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":67072,"byte_end":67152,"line_start":32,"line_end":32,"column_start":1,"column_end":81}},{"value":"/ resource_struct_init! is called on it. It provides the ResourceType.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":67153,"byte_end":67225,"line_start":33,"line_end":33,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":67226,"byte_end":67229,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ In most cases the user should not have to worry about this.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":67230,"byte_end":67293,"line_start":35,"line_end":35,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":671},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":67380,"byte_end":67388,"line_start":38,"line_end":38,"column_start":8,"column_end":16},"name":"get_type","qualname":"::resource::ResourceTypeProvider::get_type","value":"pub fn get_type() -> &'static ResourceType<Self>","parent":{"krate":0,"index":670},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":682},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":68358,"byte_end":68383,"line_start":75,"line_end":75,"column_start":8,"column_end":33},"name":"open_struct_resource_type","qualname":"::resource::open_struct_resource_type","value":"pub fn open_struct_resource_type<'a,\n                                 T: ResourceTypeProvider>(Env, &str,\n                                                          NifResourceFlags)\n-> Option<ResourceType<T>>","parent":null,"children":[],"decl_id":null,"docs":" This is the function that gets called from resource_struct_init! in on_load to create a new\n resource type.","sig":null,"attributes":[{"value":"/ This is the function that gets called from resource_struct_init! in on_load to create a new","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":68156,"byte_end":68251,"line_start":68,"line_end":68,"column_start":1,"column_end":96}},{"value":"/ resource type.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":68252,"byte_end":68270,"line_start":69,"line_end":69,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":68271,"byte_end":68274,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":68275,"byte_end":68287,"line_start":71,"line_end":71,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":68288,"byte_end":68291,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ Panics if `name` isn't null-terminated.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":68292,"byte_end":68335,"line_start":73,"line_end":73,"column_start":1,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":690},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":69944,"byte_end":69955,"line_start":113,"line_end":113,"column_start":12,"column_end":23},"name":"ResourceArc","qualname":"::resource::ResourceArc","value":"ResourceArc {  }","parent":null,"children":[{"krate":0,"index":692},{"krate":0,"index":693}],"decl_id":null,"docs":" A reference to a resource of type `T`.","sig":null,"attributes":[{"value":"/ A reference to a resource of type `T`.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":69340,"byte_end":69382,"line_start":104,"line_end":104,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":69383,"byte_end":69386,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ This type is like `std::sync::Arc`: it provides thread-safe, reference-counted storage for Rust","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":69387,"byte_end":69486,"line_start":106,"line_end":106,"column_start":1,"column_end":100}},{"value":"/ data that can be shared across threads. Data stored this way is immutable by default. If you","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":69487,"byte_end":69583,"line_start":107,"line_end":107,"column_start":1,"column_end":97}},{"value":"/ need to modify data in a resource, use a `std::sync::Mutex` or `RwLock`.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":69584,"byte_end":69660,"line_start":108,"line_end":108,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":69661,"byte_end":69664,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ Rust code and Erlang code can both have references to the same resource at the same time.  Rust","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":69665,"byte_end":69764,"line_start":110,"line_end":110,"column_start":1,"column_end":100}},{"value":"/ code uses `ResourceArc`; in Erlang, a reference to a resource is a kind of term.  You can","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":69765,"byte_end":69858,"line_start":111,"line_end":111,"column_start":1,"column_end":94}},{"value":"/ convert back and forth between the two using `Encoder` and `Decoder`.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":69859,"byte_end":69932,"line_start":112,"line_end":112,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":700},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":70472,"byte_end":70475,"line_start":131,"line_end":131,"column_start":12,"column_end":15},"name":"new","qualname":"<ResourceArc<T>>::new","value":"pub fn new(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Makes a new ResourceArc from the given type. Note that the type must have\n ResourceTypeProvider implemented for it. See module documentation for info on this.\n","sig":null,"attributes":[{"value":"/ Makes a new ResourceArc from the given type. Note that the type must have","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":70291,"byte_end":70368,"line_start":129,"line_end":129,"column_start":5,"column_end":82}},{"value":"/ ResourceTypeProvider implemented for it. See module documentation for info on this.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":70373,"byte_end":70460,"line_start":130,"line_end":130,"column_start":5,"column_end":92}}]},{"kind":"Mod","id":{"krate":0,"index":718},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/dynamic.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dynamic","qualname":"::dynamic","value":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/dynamic.rs","parent":null,"children":[{"krate":0,"index":719},{"krate":0,"index":720},{"krate":0,"index":721},{"krate":0,"index":748},{"krate":0,"index":750}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":722},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/dynamic.rs","byte_start":74303,"byte_end":74307,"line_start":5,"line_end":5,"column_start":5,"column_end":9},"name":"Atom","qualname":"::dynamic::TermType::Atom","value":"TermType::Atom","parent":{"krate":0,"index":721},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":724},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/dynamic.rs","byte_start":74313,"byte_end":74319,"line_start":6,"line_end":6,"column_start":5,"column_end":11},"name":"Binary","qualname":"::dynamic::TermType::Binary","value":"TermType::Binary","parent":{"krate":0,"index":721},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":726},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/dynamic.rs","byte_start":74325,"byte_end":74334,"line_start":7,"line_end":7,"column_start":5,"column_end":14},"name":"EmptyList","qualname":"::dynamic::TermType::EmptyList","value":"TermType::EmptyList","parent":{"krate":0,"index":721},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":728},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/dynamic.rs","byte_start":74340,"byte_end":74349,"line_start":8,"line_end":8,"column_start":5,"column_end":14},"name":"Exception","qualname":"::dynamic::TermType::Exception","value":"TermType::Exception","parent":{"krate":0,"index":721},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":730},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/dynamic.rs","byte_start":74355,"byte_end":74358,"line_start":9,"line_end":9,"column_start":5,"column_end":8},"name":"Fun","qualname":"::dynamic::TermType::Fun","value":"TermType::Fun","parent":{"krate":0,"index":721},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":732},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/dynamic.rs","byte_start":74364,"byte_end":74368,"line_start":10,"line_end":10,"column_start":5,"column_end":9},"name":"List","qualname":"::dynamic::TermType::List","value":"TermType::List","parent":{"krate":0,"index":721},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":734},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/dynamic.rs","byte_start":74374,"byte_end":74377,"line_start":11,"line_end":11,"column_start":5,"column_end":8},"name":"Map","qualname":"::dynamic::TermType::Map","value":"TermType::Map","parent":{"krate":0,"index":721},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":736},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/dynamic.rs","byte_start":74383,"byte_end":74389,"line_start":12,"line_end":12,"column_start":5,"column_end":11},"name":"Number","qualname":"::dynamic::TermType::Number","value":"TermType::Number","parent":{"krate":0,"index":721},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":738},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/dynamic.rs","byte_start":74395,"byte_end":74398,"line_start":13,"line_end":13,"column_start":5,"column_end":8},"name":"Pid","qualname":"::dynamic::TermType::Pid","value":"TermType::Pid","parent":{"krate":0,"index":721},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":740},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/dynamic.rs","byte_start":74404,"byte_end":74408,"line_start":14,"line_end":14,"column_start":5,"column_end":9},"name":"Port","qualname":"::dynamic::TermType::Port","value":"TermType::Port","parent":{"krate":0,"index":721},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":742},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/dynamic.rs","byte_start":74414,"byte_end":74417,"line_start":15,"line_end":15,"column_start":5,"column_end":8},"name":"Ref","qualname":"::dynamic::TermType::Ref","value":"TermType::Ref","parent":{"krate":0,"index":721},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":744},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/dynamic.rs","byte_start":74423,"byte_end":74428,"line_start":16,"line_end":16,"column_start":5,"column_end":10},"name":"Tuple","qualname":"::dynamic::TermType::Tuple","value":"TermType::Tuple","parent":{"krate":0,"index":721},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":746},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/dynamic.rs","byte_start":74434,"byte_end":74441,"line_start":17,"line_end":17,"column_start":5,"column_end":12},"name":"Unknown","qualname":"::dynamic::TermType::Unknown","value":"TermType::Unknown","parent":{"krate":0,"index":721},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":721},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/dynamic.rs","byte_start":74288,"byte_end":74296,"line_start":4,"line_end":4,"column_start":10,"column_end":18},"name":"TermType","qualname":"::dynamic::TermType","value":"pub enum TermType {\n    Atom,\n    Binary,\n    EmptyList,\n    Exception,\n    Fun,\n    List,\n    Map,\n    Number,\n    Pid,\n    Port,\n    Ref,\n    Tuple,\n    Unknown,\n}","parent":null,"children":[{"krate":0,"index":722},{"krate":0,"index":724},{"krate":0,"index":726},{"krate":0,"index":728},{"krate":0,"index":730},{"krate":0,"index":732},{"krate":0,"index":734},{"krate":0,"index":736},{"krate":0,"index":738},{"krate":0,"index":740},{"krate":0,"index":742},{"krate":0,"index":744},{"krate":0,"index":746}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":748},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/dynamic.rs","byte_start":74453,"byte_end":74461,"line_start":20,"line_end":20,"column_start":8,"column_end":16},"name":"get_type","qualname":"::dynamic::get_type","value":"pub fn get_type(Term) -> TermType","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":752},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/dynamic.rs","byte_start":75621,"byte_end":75629,"line_start":63,"line_end":63,"column_start":12,"column_end":20},"name":"get_type","qualname":"<Term>::get_type","value":"pub fn get_type(Self) -> TermType","parent":null,"children":[],"decl_id":null,"docs":" Returns an enum representing which type the term is.\n Note that using the individual `is_*` functions is more\n efficient for checking a single type.\n","sig":null,"attributes":[{"value":"/ Returns an enum representing which type the term is.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/dynamic.rs","byte_start":75443,"byte_end":75499,"line_start":60,"line_end":60,"column_start":5,"column_end":61}},{"value":"/ Note that using the individual `is_*` functions is more","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/dynamic.rs","byte_start":75504,"byte_end":75563,"line_start":61,"line_end":61,"column_start":5,"column_end":64}},{"value":"/ efficient for checking a single type.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/dynamic.rs","byte_start":75568,"byte_end":75609,"line_start":62,"line_end":62,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1155},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/dynamic.rs","byte_start":75696,"byte_end":75703,"line_start":67,"line_end":67,"column_start":17,"column_end":24},"name":"is_atom","qualname":"<Term>::is_atom","value":"pub fn is_atom(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1156},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/dynamic.rs","byte_start":75722,"byte_end":75731,"line_start":68,"line_end":68,"column_start":17,"column_end":26},"name":"is_binary","qualname":"<Term>::is_binary","value":"pub fn is_binary(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1157},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/dynamic.rs","byte_start":75750,"byte_end":75763,"line_start":69,"line_end":69,"column_start":17,"column_end":30},"name":"is_empty_list","qualname":"<Term>::is_empty_list","value":"pub fn is_empty_list(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1158},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/dynamic.rs","byte_start":75782,"byte_end":75794,"line_start":70,"line_end":70,"column_start":17,"column_end":29},"name":"is_exception","qualname":"<Term>::is_exception","value":"pub fn is_exception(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1159},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/dynamic.rs","byte_start":75813,"byte_end":75819,"line_start":71,"line_end":71,"column_start":17,"column_end":23},"name":"is_fun","qualname":"<Term>::is_fun","value":"pub fn is_fun(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1160},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/dynamic.rs","byte_start":75838,"byte_end":75845,"line_start":72,"line_end":72,"column_start":17,"column_end":24},"name":"is_list","qualname":"<Term>::is_list","value":"pub fn is_list(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1161},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/dynamic.rs","byte_start":75864,"byte_end":75870,"line_start":73,"line_end":73,"column_start":17,"column_end":23},"name":"is_map","qualname":"<Term>::is_map","value":"pub fn is_map(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1162},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/dynamic.rs","byte_start":75889,"byte_end":75898,"line_start":74,"line_end":74,"column_start":17,"column_end":26},"name":"is_number","qualname":"<Term>::is_number","value":"pub fn is_number(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1163},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/dynamic.rs","byte_start":75917,"byte_end":75923,"line_start":75,"line_end":75,"column_start":17,"column_end":23},"name":"is_pid","qualname":"<Term>::is_pid","value":"pub fn is_pid(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1164},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/dynamic.rs","byte_start":75942,"byte_end":75949,"line_start":76,"line_end":76,"column_start":17,"column_end":24},"name":"is_port","qualname":"<Term>::is_port","value":"pub fn is_port(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1165},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/dynamic.rs","byte_start":75968,"byte_end":75974,"line_start":77,"line_end":77,"column_start":17,"column_end":23},"name":"is_ref","qualname":"<Term>::is_ref","value":"pub fn is_ref(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1166},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/dynamic.rs","byte_start":75993,"byte_end":76001,"line_start":78,"line_end":78,"column_start":17,"column_end":25},"name":"is_tuple","qualname":"<Term>::is_tuple","value":"pub fn is_tuple(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":754},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/schedule.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"schedule","qualname":"::schedule","value":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/schedule.rs","parent":null,"children":[{"krate":0,"index":755},{"krate":0,"index":756},{"krate":0,"index":757},{"krate":0,"index":767}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":758},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/schedule.rs","byte_start":76091,"byte_end":76097,"line_start":5,"line_end":5,"column_start":5,"column_end":11},"name":"Normal","qualname":"::schedule::SchedulerFlags::Normal","value":"SchedulerFlags::Normal","parent":{"krate":0,"index":757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":761},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/schedule.rs","byte_start":76150,"byte_end":76158,"line_start":6,"line_end":6,"column_start":5,"column_end":13},"name":"DirtyCpu","qualname":"::schedule::SchedulerFlags::DirtyCpu","value":"SchedulerFlags::DirtyCpu","parent":{"krate":0,"index":757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":764},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/schedule.rs","byte_start":76220,"byte_end":76227,"line_start":7,"line_end":7,"column_start":5,"column_end":12},"name":"DirtyIo","qualname":"::schedule::SchedulerFlags::DirtyIo","value":"SchedulerFlags::DirtyIo","parent":{"krate":0,"index":757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":757},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/schedule.rs","byte_start":76070,"byte_end":76084,"line_start":4,"line_end":4,"column_start":10,"column_end":24},"name":"SchedulerFlags","qualname":"::schedule::SchedulerFlags","value":"pub enum SchedulerFlags { Normal = , DirtyCpu = , DirtyIo = , }","parent":null,"children":[{"krate":0,"index":758},{"krate":0,"index":761},{"krate":0,"index":764}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":767},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/schedule.rs","byte_start":76294,"byte_end":76311,"line_start":10,"line_end":10,"column_start":8,"column_end":25},"name":"consume_timeslice","qualname":"::schedule::consume_timeslice","value":"pub fn consume_timeslice(Env, i32) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":769},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"env","qualname":"::env","value":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","parent":null,"children":[{"krate":0,"index":770},{"krate":0,"index":771},{"krate":0,"index":772},{"krate":0,"index":773},{"krate":0,"index":774},{"krate":0,"index":775},{"krate":0,"index":776},{"krate":0,"index":777},{"krate":0,"index":1643},{"krate":0,"index":778},{"krate":0,"index":779},{"krate":0,"index":780},{"krate":0,"index":781},{"krate":0,"index":782},{"krate":0,"index":1167},{"krate":0,"index":1173},{"krate":0,"index":1171},{"krate":0,"index":784},{"krate":0,"index":788},{"krate":0,"index":800},{"krate":0,"index":802},{"krate":0,"index":803},{"krate":0,"index":817},{"krate":0,"index":1176},{"krate":0,"index":1179},{"krate":0,"index":819},{"krate":0,"index":820},{"krate":0,"index":823}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1167},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":77292,"byte_end":77295,"line_start":19,"line_end":19,"column_start":12,"column_end":15},"name":"Env","qualname":"::env::Env","value":"Env {  }","parent":null,"children":[{"krate":0,"index":1169},{"krate":0,"index":1170}],"decl_id":null,"docs":" On each NIF call, a Env is passed in. The Env is used for most operations that involve\n communicating with the BEAM, like decoding and encoding terms.","sig":null,"attributes":[{"value":"/ On each NIF call, a Env is passed in. The Env is used for most operations that involve","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":77003,"byte_end":77093,"line_start":14,"line_end":14,"column_start":1,"column_end":91}},{"value":"/ communicating with the BEAM, like decoding and encoding terms.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":77094,"byte_end":77160,"line_start":15,"line_end":15,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":77161,"byte_end":77164,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ There is no way to allocate a Env at the moment, but this may be possible in the future.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":77165,"byte_end":77257,"line_start":17,"line_end":17,"column_start":1,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":790},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":78146,"byte_end":78149,"line_start":43,"line_end":43,"column_start":19,"column_end":22},"name":"new","qualname":"<Env>::new","value":"pub unsafe fn new<T>(&'a T, NIF_ENV) -> Env","parent":null,"children":[],"decl_id":null,"docs":" Create a new Env. For the `_lifetime_marker` argument, pass a\n reference to any local variable that has its own lifetime, different\n from all other `Env` values. The purpose of the argument is to make\n it easier to know for sure that the `Env` you're creating has a\n unique lifetime (i.e. that you're following the most important safety\n rule of Rustler).","sig":null,"attributes":[{"value":"/ Create a new Env. For the `_lifetime_marker` argument, pass a","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":77647,"byte_end":77712,"line_start":34,"line_end":34,"column_start":5,"column_end":70}},{"value":"/ reference to any local variable that has its own lifetime, different","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":77717,"byte_end":77789,"line_start":35,"line_end":35,"column_start":5,"column_end":77}},{"value":"/ from all other `Env` values. The purpose of the argument is to make","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":77794,"byte_end":77865,"line_start":36,"line_end":36,"column_start":5,"column_end":76}},{"value":"/ it easier to know for sure that the `Env` you're creating has a","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":77870,"byte_end":77937,"line_start":37,"line_end":37,"column_start":5,"column_end":72}},{"value":"/ unique lifetime (i.e. that you're following the most important safety","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":77942,"byte_end":78015,"line_start":38,"line_end":38,"column_start":5,"column_end":78}},{"value":"/ rule of Rustler).","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":78020,"byte_end":78041,"line_start":39,"line_end":39,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":78046,"byte_end":78049,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ # Unsafe","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":78054,"byte_end":78066,"line_start":41,"line_end":41,"column_start":5,"column_end":17}},{"value":"/ Don't create multiple `Env`s with the same lifetime.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":78071,"byte_end":78127,"line_start":42,"line_end":42,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":792},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":78293,"byte_end":78301,"line_start":50,"line_end":50,"column_start":12,"column_end":20},"name":"as_c_arg","qualname":"<Env>::as_c_arg","value":"pub fn as_c_arg(Self) -> NIF_ENV","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":793},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":78423,"byte_end":78434,"line_start":55,"line_end":55,"column_start":12,"column_end":23},"name":"error_tuple","qualname":"<Env>::error_tuple","value":"pub fn error_tuple<T>(Self, T) -> Term where T: Encoder","parent":null,"children":[],"decl_id":null,"docs":" Convenience method for building a tuple `{error, Reason}`.\n","sig":null,"attributes":[{"value":"/ Convenience method for building a tuple `{error, Reason}`.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":78349,"byte_end":78411,"line_start":54,"line_end":54,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":795},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":79275,"byte_end":79279,"line_start":79,"line_end":79,"column_start":12,"column_end":16},"name":"send","qualname":"<Env>::send","value":"pub fn send(Self, &Pid, Term)","parent":null,"children":[],"decl_id":null,"docs":" Send a message to a process.","sig":null,"attributes":[{"value":"/ Send a message to a process.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":78614,"byte_end":78646,"line_start":63,"line_end":63,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":78651,"byte_end":78654,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ The Erlang VM imposes some odd restrictions on sending messages.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":78659,"byte_end":78727,"line_start":65,"line_end":65,"column_start":5,"column_end":73}},{"value":"/ You can send messages in either of these situations:","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":78732,"byte_end":78788,"line_start":66,"line_end":66,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":78793,"byte_end":78796,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ *   The current thread is managed by the Erlang VM, and `self` is the","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":78801,"byte_end":78874,"line_start":68,"line_end":68,"column_start":5,"column_end":78}},{"value":"/     environment of the calling process (that is, the environment that","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":78879,"byte_end":78952,"line_start":69,"line_end":69,"column_start":5,"column_end":78}},{"value":"/     Rustler passed in to your NIF); *or*","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":78957,"byte_end":79001,"line_start":70,"line_end":70,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":79006,"byte_end":79009,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ *   The current thread is *not* managed by the Erlang VM.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":79014,"byte_end":79075,"line_start":72,"line_end":72,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":79080,"byte_end":79083,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":79088,"byte_end":79100,"line_start":74,"line_end":74,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":79105,"byte_end":79108,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ Panics if the above rules are broken (by trying to send a message from","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":79113,"byte_end":79187,"line_start":76,"line_end":76,"column_start":5,"column_end":79}},{"value":"/ an `OwnedEnv` on a thread that's managed by the Erlang VM).","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":79192,"byte_end":79255,"line_start":77,"line_end":77,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":79260,"byte_end":79263,"line_start":78,"line_end":78,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":796},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":80277,"byte_end":80291,"line_start":105,"line_end":105,"column_start":12,"column_end":26},"name":"binary_to_term","qualname":"<Env>::binary_to_term","value":"pub fn binary_to_term(Self, &[u8]) -> Option<(Term, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Decodes binary data to a term.","sig":null,"attributes":[{"value":"/ Decodes binary data to a term.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":80113,"byte_end":80147,"line_start":101,"line_end":101,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":80152,"byte_end":80155,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ Follows the erlang","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":80160,"byte_end":80182,"line_start":103,"line_end":103,"column_start":5,"column_end":27}},{"value":"/ [External Term Format](http://erlang.org/doc/apps/erts/erl_ext_dist.html).","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":80187,"byte_end":80265,"line_start":104,"line_end":104,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":798},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":80627,"byte_end":80649,"line_start":114,"line_end":114,"column_start":19,"column_end":41},"name":"binary_to_term_trusted","qualname":"<Env>::binary_to_term_trusted","value":"pub unsafe fn binary_to_term_trusted(Self, &[u8]) -> Option<(Term, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Like `binary_to_term`, but can only be called on valid\n and trusted data.\n","sig":null,"attributes":[{"value":"/ Like `binary_to_term`, but can only be called on valid","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":80524,"byte_end":80582,"line_start":112,"line_end":112,"column_start":5,"column_end":63}},{"value":"/ and trusted data.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":80587,"byte_end":80608,"line_start":113,"line_end":113,"column_start":5,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":800},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":81484,"byte_end":81492,"line_start":137,"line_end":137,"column_start":12,"column_end":20},"name":"OwnedEnv","qualname":"::env::OwnedEnv","value":"OwnedEnv {  }","parent":null,"children":[{"krate":0,"index":801}],"decl_id":null,"docs":" A process-independent environment, a place where Erlang terms can be created outside of a NIF\n call.","sig":null,"attributes":[{"value":"/ A process-independent environment, a place where Erlang terms can be created outside of a NIF","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":80846,"byte_end":80943,"line_start":120,"line_end":120,"column_start":1,"column_end":98}},{"value":"/ call.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":80944,"byte_end":80953,"line_start":121,"line_end":121,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":80954,"byte_end":80957,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ Rust code can use an owned environment to build a message and send it to an","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":80958,"byte_end":81037,"line_start":123,"line_end":123,"column_start":1,"column_end":80}},{"value":"/ Erlang process.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":81038,"byte_end":81057,"line_start":124,"line_end":124,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":81058,"byte_end":81061,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/     use rustler::env::OwnedEnv;","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":81062,"byte_end":81097,"line_start":126,"line_end":126,"column_start":1,"column_end":36}},{"value":"/     use rustler::types::pid::Pid;","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":81098,"byte_end":81135,"line_start":127,"line_end":127,"column_start":1,"column_end":38}},{"value":"/     use rustler::Encoder;","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":81136,"byte_end":81165,"line_start":128,"line_end":128,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":81166,"byte_end":81169,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/     fn send_string_to_pid(data: &str, pid: &Pid) {","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":81170,"byte_end":81224,"line_start":130,"line_end":130,"column_start":1,"column_end":55}},{"value":"/         let mut msg_env = OwnedEnv::new();","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":81225,"byte_end":81271,"line_start":131,"line_end":131,"column_start":1,"column_end":47}},{"value":"/         msg_env.send_and_clear(pid, |env| data.encode(env));","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":81272,"byte_end":81336,"line_start":132,"line_end":132,"column_start":1,"column_end":65}},{"value":"/     }","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":81337,"byte_end":81346,"line_start":133,"line_end":133,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":81347,"byte_end":81350,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ There's no way to run Erlang code in an `OwnedEnv`. It's not a process. It's just a workspace","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":81351,"byte_end":81448,"line_start":135,"line_end":135,"column_start":1,"column_end":98}},{"value":"/ for building terms.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":81449,"byte_end":81472,"line_start":136,"line_end":136,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":804},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":81639,"byte_end":81642,"line_start":145,"line_end":145,"column_start":12,"column_end":15},"name":"new","qualname":"<OwnedEnv>::new","value":"pub fn new() -> OwnedEnv","parent":null,"children":[],"decl_id":null,"docs":" Allocates a new process-independent environment.\n","sig":null,"attributes":[{"value":"/ Allocates a new process-independent environment.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":81575,"byte_end":81627,"line_start":144,"line_end":144,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":805},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":81818,"byte_end":81821,"line_start":152,"line_end":152,"column_start":12,"column_end":15},"name":"run","qualname":"<OwnedEnv>::run","value":"pub fn run<F, R>(&Self, F) -> R where F: for<'a> FnOnce(Env) -> R","parent":null,"children":[],"decl_id":null,"docs":" Run some code in this environment.\n","sig":null,"attributes":[{"value":"/ Run some code in this environment.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":81768,"byte_end":81806,"line_start":151,"line_end":151,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":809},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":82472,"byte_end":82486,"line_start":171,"line_end":171,"column_start":12,"column_end":26},"name":"send_and_clear","qualname":"<OwnedEnv>::send_and_clear","value":"pub fn send_and_clear<F>(&mut Self, &Pid, F) where F: for<'a> FnOnce(Env) ->\nTerm","parent":null,"children":[],"decl_id":null,"docs":" Send a message from a Rust thread to an Erlang process.","sig":null,"attributes":[{"value":"/ Send a message from a Rust thread to an Erlang process.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":81996,"byte_end":82055,"line_start":160,"line_end":160,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":82060,"byte_end":82063,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ The environment is cleared as though by calling the `.clear()` method.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":82068,"byte_end":82142,"line_start":162,"line_end":162,"column_start":5,"column_end":79}},{"value":"/ To avoid that, use `env.send(pid, term)` instead.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":82147,"byte_end":82200,"line_start":163,"line_end":163,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":82205,"byte_end":82208,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":82213,"byte_end":82225,"line_start":165,"line_end":165,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":82230,"byte_end":82233,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ Panics if called from a thread that is managed by the Erlang VM. You","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":82238,"byte_end":82310,"line_start":167,"line_end":167,"column_start":5,"column_end":77}},{"value":"/ can only use this method on a thread that was created by other","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":82315,"byte_end":82381,"line_start":168,"line_end":168,"column_start":5,"column_end":71}},{"value":"/ means. (This curious restriction is imposed by the Erlang VM.)","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":82386,"byte_end":82452,"line_start":169,"line_end":169,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":82457,"byte_end":82460,"line_start":170,"line_end":170,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":813},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":83529,"byte_end":83534,"line_start":196,"line_end":196,"column_start":12,"column_end":17},"name":"clear","qualname":"<OwnedEnv>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Free all terms in this environment and clear it for reuse.","sig":null,"attributes":[{"value":"/ Free all terms in this environment and clear it for reuse.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":83049,"byte_end":83111,"line_start":188,"line_end":188,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":83116,"byte_end":83119,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ This invalidates `SavedTerm`s that were saved in this environment;","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":83124,"byte_end":83194,"line_start":190,"line_end":190,"column_start":5,"column_end":75}},{"value":"/ if you later try to `.load()` one, you'll get a panic.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":83199,"byte_end":83257,"line_start":191,"line_end":191,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":83262,"byte_end":83265,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ Unless you call this method after a call to `run()`, all terms created within the","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":83270,"byte_end":83355,"line_start":193,"line_end":193,"column_start":5,"column_end":90}},{"value":"/ environment hang around in memory until the `OwnedEnv` is dropped: garbage collection does","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":83360,"byte_end":83454,"line_start":194,"line_end":194,"column_start":5,"column_end":99}},{"value":"/ not continually happen as needed in a NIF environment.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":83459,"byte_end":83517,"line_start":195,"line_end":195,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":814},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":84996,"byte_end":85000,"line_start":232,"line_end":232,"column_start":12,"column_end":16},"name":"save","qualname":"<OwnedEnv>::save","value":"pub fn save<'a>(&Self, Term) -> SavedTerm","parent":null,"children":[],"decl_id":null,"docs":" Save a term for use in a later call to `.run()` or `.send()`.","sig":null,"attributes":[{"value":"/ Save a term for use in a later call to `.run()` or `.send()`.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":83701,"byte_end":83766,"line_start":204,"line_end":204,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":83771,"byte_end":83774,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ For your safety, Rust doesn't let you save `Term` values from one `.run()` call to a","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":83779,"byte_end":83867,"line_start":206,"line_end":206,"column_start":5,"column_end":93}},{"value":"/ later `.run()` call. If you try, it'll complain about lifetimes.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":83872,"byte_end":83940,"line_start":207,"line_end":207,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":83945,"byte_end":83948,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ `.save()` offers a way to do this. For example, maybe you'd like to copy a term from the","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":83953,"byte_end":84045,"line_start":209,"line_end":209,"column_start":5,"column_end":97}},{"value":"/ caller into an `OwnedEnv`, then use that term on another thread.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":84050,"byte_end":84118,"line_start":210,"line_end":210,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":84123,"byte_end":84126,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/     # use rustler::{ Env, Term };","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":84131,"byte_end":84168,"line_start":212,"line_end":212,"column_start":5,"column_end":42}},{"value":"/     use rustler::env::OwnedEnv;","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":84173,"byte_end":84208,"line_start":213,"line_end":213,"column_start":5,"column_end":40}},{"value":"/     use std::thread;","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":84213,"byte_end":84237,"line_start":214,"line_end":214,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":84242,"byte_end":84245,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/     fn thread_example<'a>(env: Env<'a>, term: Term<'a>) {","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":84250,"byte_end":84311,"line_start":216,"line_end":216,"column_start":5,"column_end":66}},{"value":"/         // Copy `term` into a new OwnedEnv, for use on another thread.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":84316,"byte_end":84390,"line_start":217,"line_end":217,"column_start":5,"column_end":79}},{"value":"/         let mut thread_env = OwnedEnv::new();","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":84395,"byte_end":84444,"line_start":218,"line_end":218,"column_start":5,"column_end":54}},{"value":"/         let saved_term = thread_env.save(term);","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":84449,"byte_end":84500,"line_start":219,"line_end":219,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":84505,"byte_end":84508,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/         thread::spawn(move || {","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":84513,"byte_end":84548,"line_start":221,"line_end":221,"column_start":5,"column_end":40}},{"value":"/             // Now run some code on the thread, using the saved term.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":84553,"byte_end":84626,"line_start":222,"line_end":222,"column_start":5,"column_end":78}},{"value":"/             thread_env.run(|env| {","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":84631,"byte_end":84669,"line_start":223,"line_end":223,"column_start":5,"column_end":43}},{"value":"/                 let term = saved_term.load(env);","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":84674,"byte_end":84726,"line_start":224,"line_end":224,"column_start":5,"column_end":57}},{"value":"/                 //... do stuff with term ...","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":84731,"byte_end":84779,"line_start":225,"line_end":225,"column_start":5,"column_end":53}},{"value":"/             });","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":84784,"byte_end":84803,"line_start":226,"line_end":226,"column_start":5,"column_end":24}},{"value":"/         });","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":84808,"byte_end":84823,"line_start":227,"line_end":227,"column_start":5,"column_end":20}},{"value":"/     }","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":84828,"byte_end":84837,"line_start":228,"line_end":228,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":84842,"byte_end":84845,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ **Note: There is no way to save terms across `OwnedEnv::send()` or `clear()`.**","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":84850,"byte_end":84933,"line_start":230,"line_end":230,"column_start":5,"column_end":88}},{"value":"/ If you try, the `.load()` call will panic.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":84938,"byte_end":84984,"line_start":231,"line_end":231,"column_start":5,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":1176},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":85544,"byte_end":85553,"line_start":253,"line_end":253,"column_start":12,"column_end":21},"name":"SavedTerm","qualname":"::env::SavedTerm","value":"SavedTerm {  }","parent":null,"children":[{"krate":0,"index":1177},{"krate":0,"index":1178}],"decl_id":null,"docs":" A term that was created in an `OwnedEnv` and saved for later use.","sig":null,"attributes":[{"value":"/ A term that was created in an `OwnedEnv` and saved for later use.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":85337,"byte_end":85406,"line_start":248,"line_end":248,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":85407,"byte_end":85410,"line_start":249,"line_end":249,"column_start":1,"column_end":4}},{"value":"/ These are created by calling `OwnedEnv::save()`. See that method's documentation for an","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":85411,"byte_end":85502,"line_start":250,"line_end":250,"column_start":1,"column_end":92}},{"value":"/ example.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":85503,"byte_end":85515,"line_start":251,"line_end":251,"column_start":1,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":821},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":85994,"byte_end":85998,"line_start":268,"line_end":268,"column_start":12,"column_end":16},"name":"load","qualname":"<SavedTerm>::load","value":"pub fn load<'a>(&Self, Env) -> Term","parent":null,"children":[],"decl_id":null,"docs":" Load this saved term back into its environment.","sig":null,"attributes":[{"value":"/ Load this saved term back into its environment.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":85670,"byte_end":85721,"line_start":261,"line_end":261,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":85726,"byte_end":85729,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":85734,"byte_end":85746,"line_start":263,"line_end":263,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":85751,"byte_end":85754,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ `env` must be the `Env` of a `.run()` or `.send()` call on the","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":85759,"byte_end":85825,"line_start":265,"line_end":265,"column_start":5,"column_end":71}},{"value":"/ `OwnedEnv` where this term was saved, and the `OwnedEnv` must not have","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":85830,"byte_end":85904,"line_start":266,"line_end":266,"column_start":5,"column_end":79}},{"value":"/ been cleared or dropped since then. Otherwise this method will panic.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":85909,"byte_end":85982,"line_start":267,"line_end":267,"column_start":5,"column_end":78}}]},{"kind":"Mod","id":{"krate":0,"index":828},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/thread.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"thread","qualname":"::thread","value":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/thread.rs","parent":null,"children":[{"krate":0,"index":829},{"krate":0,"index":830},{"krate":0,"index":831},{"krate":0,"index":832},{"krate":0,"index":833},{"krate":0,"index":834},{"krate":0,"index":835},{"krate":0,"index":1665},{"krate":0,"index":836},{"krate":0,"index":837},{"krate":0,"index":840},{"krate":0,"index":842},{"krate":0,"index":845}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":837},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/thread.rs","byte_start":87065,"byte_end":87075,"line_start":13,"line_end":13,"column_start":11,"column_end":21},"name":"JobSpawner","qualname":"::thread::JobSpawner","value":"JobSpawner","parent":null,"children":[{"krate":0,"index":838}],"decl_id":null,"docs":" A `JobSpawner` is a value that can run Rust code on non-Erlang system threads.\n Abstracts away details of thread management for `spawn()`.","sig":null,"attributes":[{"value":"/ A `JobSpawner` is a value that can run Rust code on non-Erlang system threads.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/thread.rs","byte_start":86645,"byte_end":86727,"line_start":7,"line_end":7,"column_start":1,"column_end":83}},{"value":"/ Abstracts away details of thread management for `spawn()`.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/thread.rs","byte_start":86728,"byte_end":86790,"line_start":8,"line_end":8,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/thread.rs","byte_start":86791,"byte_end":86794,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ Note: Implementations of `spawn()` must call the closure on a thread that is **not** managed by","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/thread.rs","byte_start":86795,"byte_end":86894,"line_start":10,"line_end":10,"column_start":1,"column_end":100}},{"value":"/ the Erlang VM's scheduler. Otherwise, `rustler::thread::spawn()` would try to send a message","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/thread.rs","byte_start":86895,"byte_end":86991,"line_start":11,"line_end":11,"column_start":1,"column_end":97}},{"value":"/ from an `OwnedEnv` on an Erlang thread, which would panic.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/thread.rs","byte_start":86992,"byte_end":87054,"line_start":12,"line_end":12,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":838},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/thread.rs","byte_start":87134,"byte_end":87139,"line_start":15,"line_end":15,"column_start":8,"column_end":13},"name":"spawn","qualname":"::thread::JobSpawner::spawn","value":"pub fn spawn<F: FnOnce() -> () + Send + panic::UnwindSafe + 'static>(F)","parent":{"krate":0,"index":837},"children":[],"decl_id":null,"docs":" Run the given closure on another thread.\n","sig":null,"attributes":[{"value":"/ Run the given closure on another thread.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/thread.rs","byte_start":87082,"byte_end":87126,"line_start":14,"line_end":14,"column_start":5,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":840},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/thread.rs","byte_start":87281,"byte_end":87294,"line_start":19,"line_end":19,"column_start":12,"column_end":25},"name":"ThreadSpawner","qualname":"::thread::ThreadSpawner","value":"","parent":null,"children":[],"decl_id":null,"docs":" A `JobSpawner` that uses a separate system thread for each job.\n","sig":null,"attributes":[{"value":"/ A `JobSpawner` that uses a separate system thread for each job.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/thread.rs","byte_start":87202,"byte_end":87269,"line_start":18,"line_end":18,"column_start":1,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":845},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/thread.rs","byte_start":87920,"byte_end":87925,"line_start":37,"line_end":37,"column_start":8,"column_end":13},"name":"spawn","qualname":"::thread::spawn","value":"pub fn spawn<'a, S, F>(Env, F) where F: for<'b> FnOnce(Env) -> Term + Send +\npanic::UnwindSafe + 'static, S: JobSpawner","parent":null,"children":[],"decl_id":null,"docs":" Implements threaded NIFs.","sig":null,"attributes":[{"value":"/ Implements threaded NIFs.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/thread.rs","byte_start":87493,"byte_end":87522,"line_start":28,"line_end":28,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/thread.rs","byte_start":87523,"byte_end":87526,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ This spawns a thread that calls the given closure `thread_fn`. When the closure returns, the","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/thread.rs","byte_start":87527,"byte_end":87623,"line_start":30,"line_end":30,"column_start":1,"column_end":97}},{"value":"/ thread sends its return value back to the calling process.  If the closure panics, an `{error,","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/thread.rs","byte_start":87624,"byte_end":87722,"line_start":31,"line_end":31,"column_start":1,"column_end":99}},{"value":"/ Reason}` tuple is sent instead.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/thread.rs","byte_start":87723,"byte_end":87758,"line_start":32,"line_end":32,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/thread.rs","byte_start":87759,"byte_end":87762,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ Note that the thread creates a new `Env` and passes it to the closure, so the closure","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/thread.rs","byte_start":87763,"byte_end":87852,"line_start":34,"line_end":34,"column_start":1,"column_end":90}},{"value":"/ runs under a separate environment, not under `env`.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/thread.rs","byte_start":87853,"byte_end":87908,"line_start":35,"line_end":35,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/thread.rs","byte_start":87909,"byte_end":87912,"line_start":36,"line_end":36,"column_start":1,"column_end":4}}]},{"kind":"Mod","id":{"krate":0,"index":857},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/error.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"error","qualname":"::error","value":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/error.rs","parent":null,"children":[{"krate":0,"index":858},{"krate":0,"index":859},{"krate":0,"index":860},{"krate":0,"index":861},{"krate":0,"index":862},{"krate":0,"index":863},{"krate":0,"index":864},{"krate":0,"index":865},{"krate":0,"index":877}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":866},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/error.rs","byte_start":89308,"byte_end":89314,"line_start":10,"line_end":10,"column_start":5,"column_end":11},"name":"BadArg","qualname":"::error::Error::BadArg","value":"Error::BadArg","parent":{"krate":0,"index":865},"children":[],"decl_id":null,"docs":" Returned when the NIF has been called with the wrong number or type of\n arguments.\n","sig":null,"attributes":[{"value":"/ Returned when the NIF has been called with the wrong number or type of","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/error.rs","byte_start":89210,"byte_end":89284,"line_start":8,"line_end":8,"column_start":5,"column_end":79}},{"value":"/ arguments.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/error.rs","byte_start":89289,"byte_end":89303,"line_start":9,"line_end":9,"column_start":5,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":868},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/error.rs","byte_start":89389,"byte_end":89393,"line_start":12,"line_end":12,"column_start":5,"column_end":9},"name":"Atom","qualname":"::error::Error::Atom","value":"Error::Atom(&'static str)","parent":{"krate":0,"index":865},"children":[],"decl_id":null,"docs":" Encodes the string into an atom and returns it from the NIF.\n","sig":null,"attributes":[{"value":"/ Encodes the string into an atom and returns it from the NIF.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/error.rs","byte_start":89320,"byte_end":89384,"line_start":11,"line_end":11,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":871},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/error.rs","byte_start":89413,"byte_end":89422,"line_start":13,"line_end":13,"column_start":5,"column_end":14},"name":"RaiseAtom","qualname":"::error::Error::RaiseAtom","value":"Error::RaiseAtom(&'static str)","parent":{"krate":0,"index":865},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":874},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/error.rs","byte_start":89442,"byte_end":89451,"line_start":14,"line_end":14,"column_start":5,"column_end":14},"name":"RaiseTerm","qualname":"::error::Error::RaiseTerm","value":"Error::RaiseTerm(Box<Encoder>)","parent":{"krate":0,"index":865},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":865},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/error.rs","byte_start":89198,"byte_end":89203,"line_start":7,"line_end":7,"column_start":10,"column_end":15},"name":"Error","qualname":"::error::Error","value":"pub enum Error {\n\n    /// Returned when the NIF has been called with the wrong number or type of\n    /// arguments.\n    BadArg,\n\n    /// Encodes the string into an atom and returns it from the NIF.\n    Atom(&'static str),\n    RaiseAtom(&'static str),\n    RaiseTerm(Box<Encoder>),\n}","parent":null,"children":[{"krate":0,"index":866},{"krate":0,"index":868},{"krate":0,"index":871},{"krate":0,"index":874}],"decl_id":null,"docs":" Represents usual errors that can happen in a nif. This enables you\n to return an error from anywhere, even places where you don't have\n an Env availible.\n","sig":null,"attributes":[{"value":"/ Represents usual errors that can happen in a nif. This enables you","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/error.rs","byte_start":89025,"byte_end":89095,"line_start":4,"line_end":4,"column_start":1,"column_end":71}},{"value":"/ to return an error from anywhere, even places where you don't have","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/error.rs","byte_start":89096,"byte_end":89166,"line_start":5,"line_end":5,"column_start":1,"column_end":71}},{"value":"/ an Env availible.","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/error.rs","byte_start":89167,"byte_end":89188,"line_start":6,"line_end":6,"column_start":1,"column_end":22}}]},{"kind":"Mod","id":{"krate":0,"index":879},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/export.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"export","qualname":"::export","value":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/export.rs","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":882},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/return.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"r#return","qualname":"::r#return","value":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/return.rs","parent":null,"children":[{"krate":0,"index":883},{"krate":0,"index":884},{"krate":0,"index":885},{"krate":0,"index":886},{"krate":0,"index":887},{"krate":0,"index":888},{"krate":0,"index":889},{"krate":0,"index":890},{"krate":0,"index":898}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":892},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/return.rs","byte_start":96999,"byte_end":97003,"line_start":6,"line_end":6,"column_start":5,"column_end":9},"name":"Term","qualname":"::r#return::Return::Term","value":"Return::Term(Term)","parent":{"krate":0,"index":890},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":895},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/return.rs","byte_start":97019,"byte_end":97024,"line_start":7,"line_end":7,"column_start":5,"column_end":10},"name":"Error","qualname":"::r#return::Return::Error","value":"Return::Error(Error)","parent":{"krate":0,"index":890},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":890},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/return.rs","byte_start":96982,"byte_end":96988,"line_start":5,"line_end":5,"column_start":10,"column_end":16},"name":"Return","qualname":"::r#return::Return","value":"pub enum Return<'a> { Term(Term), Error(Error), }","parent":null,"children":[{"krate":0,"index":892},{"krate":0,"index":895}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":902},"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":1894,"byte_end":1903,"line_start":65,"line_end":65,"column_start":10,"column_end":19},"name":"NifResult","qualname":"::NifResult","value":"Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/codegen_runtime.rs","byte_start":18817,"byte_end":18818,"line_start":20,"line_end":20,"column_start":34,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/codegen_runtime.rs","byte_start":19005,"byte_end":19011,"line_start":28,"line_end":28,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/codegen_runtime.rs","byte_start":19579,"byte_end":19590,"line_start":51,"line_end":51,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":203}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":23803,"byte_end":23807,"line_start":12,"line_end":12,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":230},{"krate":0,"index":232}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":26232,"byte_end":26236,"line_start":85,"line_end":85,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":26389,"byte_end":26393,"line_start":91,"line_end":91,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":238}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":26508,"byte_end":26512,"line_start":96,"line_end":96,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":242}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":26638,"byte_end":26642,"line_start":102,"line_end":102,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":245}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":26770,"byte_end":26774,"line_start":109,"line_end":109,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":248}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":27701,"byte_end":27705,"line_start":141,"line_end":141,"column_start":22,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":27730,"byte_end":27734,"line_start":142,"line_end":142,"column_start":22,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":32110,"byte_end":32121,"line_start":16,"line_end":16,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":34760,"byte_end":34771,"line_start":93,"line_end":93,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":290}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":34863,"byte_end":34874,"line_start":98,"line_end":98,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":292}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":34972,"byte_end":34983,"line_start":103,"line_end":103,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":294},{"krate":0,"index":295}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":35091,"byte_end":35102,"line_start":109,"line_end":109,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":297}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":35199,"byte_end":35210,"line_start":115,"line_end":115,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":299}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":35378,"byte_end":35389,"line_start":123,"line_end":123,"column_start":22,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":35488,"byte_end":35494,"line_start":132,"line_end":132,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":313},{"krate":0,"index":314}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":38077,"byte_end":38083,"line_start":219,"line_end":219,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":317}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":38173,"byte_end":38179,"line_start":224,"line_end":224,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":320},{"krate":0,"index":321}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":38299,"byte_end":38305,"line_start":231,"line_end":231,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":324}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":38428,"byte_end":38434,"line_start":236,"line_end":236,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":327}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":38558,"byte_end":38562,"line_start":243,"line_end":243,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":331}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":40432,"byte_end":40444,"line_start":45,"line_end":45,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":351}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":40692,"byte_end":40704,"line_start":56,"line_end":56,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":354},{"krate":0,"index":355}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":41451,"byte_end":41463,"line_start":80,"line_end":80,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":358}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":41916,"byte_end":41919,"line_start":96,"line_end":96,"column_start":25,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":362}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":42073,"byte_end":42076,"line_start":105,"line_end":105,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":367}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":42917,"byte_end":42921,"line_start":136,"line_end":136,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":385},{"krate":0,"index":386},{"krate":0,"index":388},{"krate":0,"index":390}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":45373,"byte_end":45377,"line_start":13,"line_end":13,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":411},{"krate":0,"index":412},{"krate":0,"index":413},{"krate":0,"index":414},{"krate":0,"index":415}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":50425,"byte_end":50436,"line_start":184,"line_end":184,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":422}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":50689,"byte_end":50700,"line_start":192,"line_end":192,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":426}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":50866,"byte_end":50877,"line_start":200,"line_end":200,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":429},{"krate":0,"index":430}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":51301,"byte_end":51312,"line_start":213,"line_end":213,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":434}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":51532,"byte_end":51546,"line_start":222,"line_end":222,"column_start":29,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":438}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/string.rs","byte_start":54464,"byte_end":54470,"line_start":4,"line_end":4,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":469}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/string.rs","byte_start":55495,"byte_end":55501,"line_start":42,"line_end":42,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":482}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/pid.rs","byte_start":59209,"byte_end":59212,"line_start":10,"line_end":10,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":517}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/pid.rs","byte_start":59308,"byte_end":59311,"line_start":16,"line_end":16,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":520}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/pid.rs","byte_start":59545,"byte_end":59548,"line_start":24,"line_end":24,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":523}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/pid.rs","byte_start":59695,"byte_end":59698,"line_start":30,"line_end":30,"column_start":10,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":527}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/truthy.rs","byte_start":60751,"byte_end":60757,"line_start":14,"line_end":14,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":541}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/truthy.rs","byte_start":60874,"byte_end":60880,"line_start":20,"line_end":20,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":545}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/mod.rs","byte_start":21546,"byte_end":21550,"line_start":40,"line_end":40,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":566}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/mod.rs","byte_start":21668,"byte_end":21672,"line_start":45,"line_end":45,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":570}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/mod.rs","byte_start":21934,"byte_end":21940,"line_start":60,"line_end":60,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":578}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/mod.rs","byte_start":22185,"byte_end":22191,"line_start":72,"line_end":72,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":583}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/mod.rs","byte_start":22606,"byte_end":22612,"line_start":90,"line_end":90,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":587}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/mod.rs","byte_start":22956,"byte_end":22962,"line_start":103,"line_end":103,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":593}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":62624,"byte_end":62628,"line_start":18,"line_end":18,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":609}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":62777,"byte_end":62781,"line_start":24,"line_end":24,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":612},{"krate":0,"index":613},{"krate":0,"index":614},{"krate":0,"index":615},{"krate":0,"index":617},{"krate":0,"index":619},{"krate":0,"index":620}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":65237,"byte_end":65241,"line_start":100,"line_end":100,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":623}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":65403,"byte_end":65407,"line_start":105,"line_end":105,"column_start":17,"column_end":21},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":65687,"byte_end":65691,"line_start":116,"line_end":116,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":629}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":65801,"byte_end":65805,"line_start":121,"line_end":121,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":632}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":65943,"byte_end":65947,"line_start":127,"line_end":127,"column_start":26,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":65980,"byte_end":65984,"line_start":128,"line_end":128,"column_start":26,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":67446,"byte_end":67457,"line_start":41,"line_end":41,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":674}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":67613,"byte_end":67624,"line_start":49,"line_end":49,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":679}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":70106,"byte_end":70117,"line_start":122,"line_end":122,"column_start":25,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":70178,"byte_end":70189,"line_start":123,"line_end":123,"column_start":25,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Inherent","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":70235,"byte_end":70246,"line_start":125,"line_end":125,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":700},{"krate":0,"index":701},{"krate":0,"index":702},{"krate":0,"index":704},{"krate":0,"index":705}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":71961,"byte_end":71972,"line_start":184,"line_end":184,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":708},{"krate":0,"index":709}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":72111,"byte_end":72122,"line_start":195,"line_end":195,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":712}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":72524,"byte_end":72535,"line_start":212,"line_end":212,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":715}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/dynamic.rs","byte_start":75428,"byte_end":75432,"line_start":59,"line_end":59,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":752},{"krate":0,"index":1155},{"krate":0,"index":1156},{"krate":0,"index":1157},{"krate":0,"index":1158},{"krate":0,"index":1159},{"krate":0,"index":1160},{"krate":0,"index":1161},{"krate":0,"index":1162},{"krate":0,"index":1163},{"krate":0,"index":1164},{"krate":0,"index":1165},{"krate":0,"index":1166}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":77531,"byte_end":77534,"line_start":27,"line_end":27,"column_start":37,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":787}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Inherent","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":77633,"byte_end":77636,"line_start":33,"line_end":33,"column_start":10,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":790},{"krate":0,"index":792},{"krate":0,"index":793},{"krate":0,"index":795},{"krate":0,"index":796},{"krate":0,"index":798}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":81542,"byte_end":81550,"line_start":141,"line_end":141,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":81560,"byte_end":81568,"line_start":143,"line_end":143,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":804},{"krate":0,"index":805},{"krate":0,"index":809},{"krate":0,"index":813},{"krate":0,"index":814}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":85214,"byte_end":85222,"line_start":240,"line_end":240,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":818}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":85635,"byte_end":85644,"line_start":258,"line_end":258,"column_start":22,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":85654,"byte_end":85663,"line_start":260,"line_end":260,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":821}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":86455,"byte_end":86463,"line_start":280,"line_end":280,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":824}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/thread.rs","byte_start":87317,"byte_end":87330,"line_start":21,"line_end":21,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":843}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/error.rs","byte_start":89518,"byte_end":89523,"line_start":17,"line_end":17,"column_start":45,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":878}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/return.rs","byte_start":97069,"byte_end":97075,"line_start":9,"line_end":9,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":900}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":1239,"byte_end":1254,"line_start":31,"line_end":31,"column_start":9,"column_end":24},"ref_id":{"krate":0,"index":163}},{"kind":"Mod","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":1309,"byte_end":1314,"line_start":36,"line_end":36,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":207}},{"kind":"Mod","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/mod.rs","byte_start":20912,"byte_end":20916,"line_start":4,"line_end":4,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":213}},{"kind":"Mod","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/mod.rs","byte_start":20976,"byte_end":20982,"line_start":8,"line_end":8,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":255}},{"kind":"Mod","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/mod.rs","byte_start":21061,"byte_end":21065,"line_start":12,"line_end":12,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":335}},{"kind":"Mod","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/mod.rs","byte_start":21133,"byte_end":21136,"line_start":16,"line_end":16,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":392}},{"kind":"Mod","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/mod.rs","byte_start":21202,"byte_end":21211,"line_start":20,"line_end":20,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":440}},{"kind":"Mod","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/mod.rs","byte_start":21236,"byte_end":21242,"line_start":22,"line_end":22,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":456}},{"kind":"Mod","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/mod.rs","byte_start":21252,"byte_end":21257,"line_start":23,"line_end":23,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":484}},{"kind":"Mod","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/mod.rs","byte_start":21283,"byte_end":21286,"line_start":26,"line_end":26,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":504}},{"kind":"Mod","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/mod.rs","byte_start":21329,"byte_end":21335,"line_start":29,"line_end":29,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":529}},{"kind":"Mod","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/mod.rs","byte_start":21346,"byte_end":21359,"line_start":31,"line_end":31,"column_start":9,"column_end":22},"ref_id":{"krate":0,"index":546}},{"kind":"Mod","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":1471,"byte_end":1479,"line_start":44,"line_end":44,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":647}},{"kind":"Mod","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":1543,"byte_end":1550,"line_start":48,"line_end":48,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":718}},{"kind":"Mod","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":1595,"byte_end":1603,"line_start":51,"line_end":51,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":754}},{"kind":"Mod","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":1654,"byte_end":1657,"line_start":53,"line_end":53,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":769}},{"kind":"Mod","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":1704,"byte_end":1710,"line_start":55,"line_end":55,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":828}},{"kind":"Mod","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":1780,"byte_end":1785,"line_start":58,"line_end":58,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":857}},{"kind":"Mod","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":1795,"byte_end":1801,"line_start":59,"line_end":59,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":879}},{"kind":"Mod","span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/lib.rs","byte_start":1841,"byte_end":1849,"line_start":62,"line_end":62,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":882}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/codegen_runtime.rs","byte_start":18817,"byte_end":18818,"line_start":20,"line_end":20,"column_start":34,"column_end":35},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":183},"to":{"krate":0,"index":180}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/codegen_runtime.rs","byte_start":19005,"byte_end":19011,"line_start":28,"line_end":28,"column_start":34,"column_end":40},"kind":{"Impl":{"id":1}},"from":{"krate":2,"index":31890},"to":{"krate":0,"index":180}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/codegen_runtime.rs","byte_start":19579,"byte_end":19590,"line_start":51,"line_end":51,"column_start":6,"column_end":17},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":188},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":23803,"byte_end":23807,"line_start":12,"line_end":12,"column_start":6,"column_end":10},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":923},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":26232,"byte_end":26236,"line_start":85,"line_end":85,"column_start":21,"column_end":25},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":923},"to":{"krate":2,"index":6555}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":26389,"byte_end":26393,"line_start":91,"line_end":91,"column_start":18,"column_end":22},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":923},"to":{"krate":0,"index":558}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":26508,"byte_end":26512,"line_start":96,"line_end":96,"column_start":26,"column_end":30},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":923},"to":{"krate":0,"index":561}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":26638,"byte_end":26642,"line_start":102,"line_end":102,"column_start":34,"column_end":38},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":923},"to":{"krate":2,"index":1760}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":26770,"byte_end":26774,"line_start":109,"line_end":109,"column_start":10,"column_end":14},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1146},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":27701,"byte_end":27705,"line_start":141,"line_end":141,"column_start":22,"column_end":26},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":923},"to":{"krate":2,"index":2046}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/atom.rs","byte_start":27730,"byte_end":27734,"line_start":142,"line_end":142,"column_start":22,"column_end":26},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":923},"to":{"krate":2,"index":2034}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":32110,"byte_end":32121,"line_start":16,"line_end":16,"column_start":10,"column_end":21},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":275},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":34760,"byte_end":34771,"line_start":93,"line_end":93,"column_start":23,"column_end":34},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":275},"to":{"krate":2,"index":1710}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":34863,"byte_end":34874,"line_start":98,"line_end":98,"column_start":26,"column_end":37},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":275},"to":{"krate":2,"index":1713}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":34972,"byte_end":34983,"line_start":103,"line_end":103,"column_start":16,"column_end":27},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":275},"to":{"krate":2,"index":2231}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":35091,"byte_end":35102,"line_start":109,"line_end":109,"column_start":19,"column_end":30},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":275},"to":{"krate":2,"index":2244}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":35199,"byte_end":35210,"line_start":115,"line_end":115,"column_start":15,"column_end":26},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":275},"to":{"krate":2,"index":2255}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":35378,"byte_end":35389,"line_start":123,"line_end":123,"column_start":22,"column_end":33},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":275},"to":{"krate":2,"index":2034}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":35488,"byte_end":35494,"line_start":132,"line_end":132,"column_start":10,"column_end":16},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":301},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":38077,"byte_end":38083,"line_start":219,"line_end":219,"column_start":27,"column_end":33},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":301},"to":{"krate":2,"index":1710}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":38173,"byte_end":38179,"line_start":224,"line_end":224,"column_start":20,"column_end":26},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":301},"to":{"krate":2,"index":2231}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":38299,"byte_end":38305,"line_start":231,"line_end":231,"column_start":26,"column_end":32},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":301},"to":{"krate":0,"index":561}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":38428,"byte_end":38434,"line_start":236,"line_end":236,"column_start":22,"column_end":28},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":301},"to":{"krate":0,"index":558}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/binary.rs","byte_start":38558,"byte_end":38562,"line_start":243,"line_end":243,"column_start":10,"column_end":14},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1146},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":40432,"byte_end":40444,"line_start":45,"line_end":45,"column_start":10,"column_end":22},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":346},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":40692,"byte_end":40704,"line_start":56,"line_end":56,"column_start":23,"column_end":35},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":346},"to":{"krate":2,"index":5281}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":41451,"byte_end":41463,"line_start":80,"line_end":80,"column_start":26,"column_end":38},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":346},"to":{"krate":0,"index":561}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":41916,"byte_end":41919,"line_start":96,"line_end":96,"column_start":25,"column_end":28},"kind":{"Impl":{"id":27}},"from":{"krate":5,"index":4551},"to":{"krate":0,"index":558}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":42073,"byte_end":42076,"line_start":105,"line_end":105,"column_start":29,"column_end":32},"kind":{"Impl":{"id":28}},"from":{"krate":5,"index":4551},"to":{"krate":0,"index":561}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/list.rs","byte_start":42917,"byte_end":42921,"line_start":136,"line_end":136,"column_start":10,"column_end":14},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1146},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":45373,"byte_end":45377,"line_start":13,"line_end":13,"column_start":10,"column_end":14},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1146},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":50425,"byte_end":50436,"line_start":184,"line_end":184,"column_start":10,"column_end":21},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":416},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":50689,"byte_end":50700,"line_start":192,"line_end":192,"column_start":19,"column_end":30},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":416},"to":{"krate":2,"index":2255}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":50866,"byte_end":50877,"line_start":200,"line_end":200,"column_start":23,"column_end":34},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":416},"to":{"krate":2,"index":5281}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":51301,"byte_end":51312,"line_start":213,"line_end":213,"column_start":26,"column_end":37},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":416},"to":{"krate":0,"index":561}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/map.rs","byte_start":51532,"byte_end":51546,"line_start":222,"line_end":222,"column_start":29,"column_end":43},"kind":{"Impl":{"id":35}},"from":{"krate":2,"index":30526},"to":{"krate":0,"index":561}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/string.rs","byte_start":54464,"byte_end":54470,"line_start":4,"line_end":4,"column_start":26,"column_end":32},"kind":{"Impl":{"id":62}},"from":{"krate":5,"index":5311},"to":{"krate":0,"index":561}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/string.rs","byte_start":55495,"byte_end":55501,"line_start":42,"line_end":42,"column_start":18,"column_end":24},"kind":{"Impl":{"id":64}},"from":{"krate":5,"index":5311},"to":{"krate":0,"index":558}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/pid.rs","byte_start":59209,"byte_end":59212,"line_start":10,"line_end":10,"column_start":6,"column_end":9},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1142},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/pid.rs","byte_start":59308,"byte_end":59311,"line_start":16,"line_end":16,"column_start":26,"column_end":29},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1142},"to":{"krate":0,"index":561}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/pid.rs","byte_start":59545,"byte_end":59548,"line_start":24,"line_end":24,"column_start":18,"column_end":21},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1142},"to":{"krate":0,"index":558}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/pid.rs","byte_start":59695,"byte_end":59698,"line_start":30,"line_end":30,"column_start":10,"column_end":13},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1167},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/truthy.rs","byte_start":60751,"byte_end":60757,"line_start":14,"line_end":14,"column_start":18,"column_end":24},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":537},"to":{"krate":0,"index":558}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/truthy.rs","byte_start":60874,"byte_end":60880,"line_start":20,"line_end":20,"column_start":26,"column_end":32},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":537},"to":{"krate":0,"index":561}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/mod.rs","byte_start":21459,"byte_end":21464,"line_start":36,"line_end":36,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":2039},"to":{"krate":0,"index":561}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/mod.rs","byte_start":21546,"byte_end":21550,"line_start":40,"line_end":40,"column_start":22,"column_end":26},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1146},"to":{"krate":0,"index":558}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/mod.rs","byte_start":21668,"byte_end":21672,"line_start":45,"line_end":45,"column_start":26,"column_end":30},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1146},"to":{"krate":0,"index":561}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/mod.rs","byte_start":21934,"byte_end":21940,"line_start":60,"line_end":60,"column_start":21,"column_end":27},"kind":{"Impl":{"id":73}},"from":{"krate":2,"index":31731},"to":{"krate":0,"index":558}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/mod.rs","byte_start":22185,"byte_end":22191,"line_start":72,"line_end":72,"column_start":29,"column_end":35},"kind":{"Impl":{"id":74}},"from":{"krate":2,"index":31731},"to":{"krate":0,"index":561}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/mod.rs","byte_start":22606,"byte_end":22612,"line_start":90,"line_end":90,"column_start":24,"column_end":30},"kind":{"Impl":{"id":75}},"from":{"krate":2,"index":31890},"to":{"krate":0,"index":558}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/types/mod.rs","byte_start":22956,"byte_end":22962,"line_start":103,"line_end":103,"column_start":32,"column_end":38},"kind":{"Impl":{"id":76}},"from":{"krate":2,"index":31890},"to":{"krate":0,"index":561}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":62624,"byte_end":62628,"line_start":18,"line_end":18,"column_start":20,"column_end":24},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1146},"to":{"krate":2,"index":6555}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":62777,"byte_end":62781,"line_start":24,"line_end":24,"column_start":10,"column_end":14},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1146},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":65237,"byte_end":65241,"line_start":100,"line_end":100,"column_start":24,"column_end":28},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1146},"to":{"krate":2,"index":1760}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":65403,"byte_end":65407,"line_start":105,"line_end":105,"column_start":17,"column_end":21},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1146},"to":{"krate":2,"index":1765}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":65687,"byte_end":65691,"line_start":116,"line_end":116,"column_start":18,"column_end":22},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1146},"to":{"krate":2,"index":1786}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":65801,"byte_end":65805,"line_start":121,"line_end":121,"column_start":25,"column_end":29},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1146},"to":{"krate":2,"index":1797}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":65943,"byte_end":65947,"line_start":127,"line_end":127,"column_start":26,"column_end":30},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1146},"to":{"krate":2,"index":2046}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/term.rs","byte_start":65980,"byte_end":65984,"line_start":128,"line_end":128,"column_start":26,"column_end":30},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1146},"to":{"krate":2,"index":2034}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":67341,"byte_end":67346,"line_start":37,"line_end":37,"column_start":33,"column_end":38},"kind":"SuperTrait","from":{"krate":2,"index":2039},"to":{"krate":0,"index":670}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":67349,"byte_end":67353,"line_start":37,"line_end":37,"column_start":41,"column_end":45},"kind":"SuperTrait","from":{"krate":2,"index":2034},"to":{"krate":0,"index":670}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":67356,"byte_end":67360,"line_start":37,"line_end":37,"column_start":48,"column_end":52},"kind":"SuperTrait","from":{"krate":2,"index":2046},"to":{"krate":0,"index":670}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":67446,"byte_end":67457,"line_start":41,"line_end":41,"column_start":21,"column_end":32},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":690},"to":{"krate":0,"index":558}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":67613,"byte_end":67624,"line_start":49,"line_end":49,"column_start":29,"column_end":40},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":690},"to":{"krate":0,"index":561}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":70106,"byte_end":70117,"line_start":122,"line_end":122,"column_start":25,"column_end":36},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":690},"to":{"krate":2,"index":2034}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":70178,"byte_end":70189,"line_start":123,"line_end":123,"column_start":25,"column_end":36},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":690},"to":{"krate":2,"index":2046}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":70235,"byte_end":70246,"line_start":125,"line_end":125,"column_start":9,"column_end":20},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":690},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":71961,"byte_end":71972,"line_start":184,"line_end":184,"column_start":19,"column_end":30},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":690},"to":{"krate":2,"index":2231}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":72111,"byte_end":72122,"line_start":195,"line_end":195,"column_start":19,"column_end":30},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":690},"to":{"krate":2,"index":1732}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/resource.rs","byte_start":72524,"byte_end":72535,"line_start":212,"line_end":212,"column_start":18,"column_end":29},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":690},"to":{"krate":2,"index":2255}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/dynamic.rs","byte_start":75428,"byte_end":75432,"line_start":59,"line_end":59,"column_start":10,"column_end":14},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1146},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":77531,"byte_end":77534,"line_start":27,"line_end":27,"column_start":37,"column_end":40},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1167},"to":{"krate":2,"index":1760}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":77633,"byte_end":77636,"line_start":33,"line_end":33,"column_start":10,"column_end":13},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1167},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":81542,"byte_end":81550,"line_start":141,"line_end":141,"column_start":22,"column_end":30},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":800},"to":{"krate":2,"index":2034}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":81560,"byte_end":81568,"line_start":143,"line_end":143,"column_start":6,"column_end":14},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":800},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":85214,"byte_end":85222,"line_start":240,"line_end":240,"column_start":15,"column_end":23},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":800},"to":{"krate":2,"index":2255}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":85635,"byte_end":85644,"line_start":258,"line_end":258,"column_start":22,"column_end":31},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1176},"to":{"krate":2,"index":2034}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":85654,"byte_end":85663,"line_start":260,"line_end":260,"column_start":6,"column_end":15},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1176},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/env.rs","byte_start":86455,"byte_end":86463,"line_start":280,"line_end":280,"column_start":18,"column_end":26},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":800},"to":{"krate":2,"index":2022}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/thread.rs","byte_start":87317,"byte_end":87330,"line_start":21,"line_end":21,"column_start":21,"column_end":34},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":840},"to":{"krate":0,"index":837}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/error.rs","byte_start":89518,"byte_end":89523,"line_start":17,"line_end":17,"column_start":45,"column_end":50},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":865},"to":{"krate":0,"index":180}},{"span":{"file_name":"/Users/donnie/.cargo/registry/src/github.com-1ecc6299db9ec823/rustler-0.21.1/src/return.rs","byte_start":97069,"byte_end":97075,"line_start":9,"line_end":9,"column_start":35,"column_end":41},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":890},"to":{"krate":0,"index":180}}]}